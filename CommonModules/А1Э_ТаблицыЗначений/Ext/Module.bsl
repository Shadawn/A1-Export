#Область ПрограммныйИнтерфейс

Функция ИндексПервойНайденнойСтроки(ТаблицаЗначений, СтруктураОтбора) Экспорт
	РезультатОтбора = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
	Если РезультатОтбора.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТаблицаЗначений.Индекс(РезультатОтбора[0]);
	КонецЕсли;
КонецФункции 

Функция ДобавитьСтроку(Таблица, СтруктураДанных) Экспорт 
	Строка = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
	Возврат Строка;
КонецФункции

Функция МаксимумКолонки(Таблица, Колонка, Знач НачальноеЗначение = Неопределено) Экспорт
	Если Таблица.Количество() = 0 Тогда Возврат НачальноеЗначение; КонецЕсли;
	ЗначениеВПервойСтроке = Таблица[0][Колонка];
	Если НачальноеЗначение = Неопределено Тогда
		Если ТипЗнч(ЗначениеВПервойСтроке) = Тип("Число") Тогда
			НачальноеЗначение = -10000000000000000000;
		ИначеЕсли ТипЗнч(ЗначениеВПервойСтроке) = Тип("Строка") Тогда
			НачальноеЗначение = "";
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Функция " + ИмяМодуля() + ".МаксимумКолонки() требует обязательного указания начального значения для колонок типов отличный от Строка,Число");
		КонецЕсли;
	КонецЕсли;
	
	Результат = НачальноеЗначение;
	Для Каждого Строка Из Таблица Цикл
		Если Строка[Колонка] <= Результат Тогда Продолжить; КонецЕсли;
		Результат = Строка[Колонка];
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Проверяет, есть ли колонка у таблицы. Предназначена для использования с ТабличнымиЧастями, у которых нет свойства Колонки.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений,ТабличнаяЧасть - 
//  Колонка	 - Строка	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ЕстьКолонка(Таблица, Колонка) Экспорт
	Если Таблица.Количество() <> 0 Тогда
		Возврат А1Э_Общее.Свойство(Таблица[0], Колонка);
	КонецЕсли;
	Строка = Таблица.Добавить();
	ЕстьКолонка = А1Э_Общее.Свойство(Строка, Колонка);
	Таблица.Очистить();
	Возврат ЕстьКолонка;
КонецФункции

#Если НЕ Клиент Тогда
	
	Функция ТекстЗапросаПомещенияВоВременнуюТаблицу(ТаблицаЗначений, ИмяВременнойТаблицы = "ВТ") Экспорт
		СтруктураЗапроса = А1Э_Запросы.НовыйСтруктураЗапроса(,ИмяВременнойТаблицы);
		
		ИсточникДанных = А1Э_Запросы.НовыйИсточникДанныхЗапроса("Таблица", "&" + ИмяВременнойТаблицы);
		А1Э_Запросы.ДобавитьИсточникДанных(СтруктураЗапроса, ИсточникДанных);
		
		МассивПолей = Новый Массив;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			//МоментВремени не может быть выбран в запросе, подобные типы игнорируем.
			Если Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда Продолжить; КонецЕсли;
			МассивПолей.Добавить(Колонка.Имя);
		КонецЦикла;
		А1Э_Запросы.ДобавитьПоля(СтруктураЗапроса, МассивПолей);
		
		Возврат А1Э_Запросы.ТекстЗапросаИзСтруктуры(СтруктураЗапроса);
	КонецФункции
	
#КонецЕсли

#КонецОбласти 

#Область Декларации

Функция НовыйСтруктураКолонки(Имя)
	Структура = Новый Структура("Имя,МассивТипов", Имя, Новый Массив);
	Возврат Структура;
КонецФункции

Функция НовыйКонвертация(Имя, ИсточникДанных, РеквизитПоиска, ПроверятьУникальность = Истина, ПроверятьЗаполненность = Истина, КолонкаРезультат, СтрокаСоединения = "") Экспорт
	Структура = Новый Структура("Имя,ИсточникДанных,РеквизитПоиска,ПроверятьУникальность,ПроверятьЗаполненность,КолонкаРезультат,СтрокаСоединения", 
	Имя, ИсточникДанных, РеквизитПоиска, ПроверятьУникальность, ПроверятьЗаполненность, КолонкаРезультат, СтрокаСоединения);
	Возврат Структура;
КонецФункции

#КонецОбласти 

#Область ИнтерфейсМассиваСтруктур

Функция НовыйТаблицаЗначений() Экспорт 
	#Если НЕ Клиент Тогда
		Возврат Новый ТаблицаЗначений;
	#Иначе
		Возврат Новый Массив;
	#КонецЕсли
КонецФункции

Функция ДобавитьКолонку(Таблица, Имя, ОписаниеТипов) Экспорт
	#Если НЕ Клиент Тогда
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
			Таблица.Колонки.Добавить(Имя, А1Э_СтандартныеТипы.ОписаниеТиповПолучить(ОписаниеТипов));
		КонецЕсли;
	#КонецЕсли
	
	Для Каждого Структура Из Таблица Цикл
		Структура.Вставить(Имя, А1Э_СтандартныеТипы.ПустоеЗначение(ОписаниеТипов));
	КонецЦикла;
КонецФункции

Функция ВМассивСтруктур(ТаблицаЗначений) Экспорт
	#Если Клиент Тогда
		А1Э_Служебный.СлужебноеИсключение("Конвертация таблицы значений в массив структур доступна только на сервере!");	
	#КонецЕсли
	
	#Если Сервер ИЛИ ВнешнееСоединение Тогда
		#Если Сервер И НЕ Сервер Тогда
			ТаблицаЗначений = Новый ТаблицаЗначений;		
		#КонецЕсли
		
		МассивСтруктур = Новый Массив;
		
		Для Каждого Строка Из ТаблицаЗначений Цикл
			СтруктураСтроки = Новый Структура;
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				СтруктураСтроки.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
			КонецЦикла;
			МассивСтруктур.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		Возврат МассивСтруктур;
	#КонецЕсли
КонецФункции

Функция ВТаблицуЗначений(МассивСтруктур, ГлубокийАнализ = Истина) Экспорт
	#Если Клиент Тогда
		А1Э_Служебный.СлужебноеИсключение("Конвертация массива структур в таблицу значений доступна только на сервере!");	
	#КонецЕсли
	
	#Если НЕ Клиент Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
		СоздатьКолонкиПоМассивуСтруктур(ТаблицаЗначений, МассивСтруктур, ГлубокийАнализ);
		
		Для Каждого Структура Из МассивСтруктур Цикл
			Строка = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Структура);
		КонецЦикла;
		
		Возврат ТаблицаЗначений;
	#КонецЕсли
	
КонецФункции

Функция НайтиСтроки(Таблица, СтруктураОтбора) Экспорт 
	#Если НЕ Клиент Тогда
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
			Возврат Таблица.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
	#КонецЕсли
	Результат = Новый Массив;
	Для Каждого Структура Из Таблица Цикл
		Подходит = Истина;
		Для Каждого Пара Из СтруктураОтбора Цикл
			Если Структура[Пара.Ключ] <> Пара.Значение Тогда
				Подходит = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если Подходит Тогда
			Результат.Добавить(Структура);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Ищет строку с таблице по значению в колонке. Если не находит, возвращает Неопределено.
// Если находит более одной, вызывает исключение.
//
// Параметры:
//  МассивСтруктур	 - ТаблицаЗначений,Массив - 
//  ИмяКолонки		 - Строка - 
//  Значение		 - Произвольный - 
// 
// Возвращаемое значение:
//   - СтрокаТаблицыЗначений,Структура,Неопределено
//
Функция НайтиСтроку(МассивСтруктур, ИмяКолонки, Значение) Экспорт
	СтруктураОтбора = Новый Структура(ИмяКолонки, Значение);
	
	МассивНайденныхСтрок = НайтиСтроки(МассивСтруктур, СтруктураОтбора);
	
	Возврат А1Э_Массивы.ЕдинственныйЭлемент(МассивНайденныхСтрок); 
КонецФункции

Функция УдалитьСтроки(Таблица, Знач МассивИндексов) Экспорт 
	МассивИндексов = А1Э_Массивы.Массив(МассивИндексов);	
	А1Э_Массивы.Сортировать(МассивИндексов);
	
	Сч = -1;
	СчУдаления = 0;
	Пока Сч < МассивИндексов.Количество() - 1 Цикл
		Сч = Сч + 1;
		Индекс = МассивИндексов[Сч];
		Таблица.Удалить(Индекс - СчУдаления);
		СчУдаления = СчУдаления + 1;
	КонецЦикла;
КонецФункции

Функция ЗагрузитьКолонку(Таблица, Колонка, Массив) Экспорт
	#Если НЕ Клиент Тогда
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
			Таблица.ЗагрузитьКолонку(Таблица, Колонка);
			Возврат Неопределено;
		КонецЕсли;
	#КонецЕсли
	Сч = -1;
	Для Каждого Элемент Из Массив Цикл
		Сч = Сч + 1;
		Если Сч >= Таблица.Количество() Тогда
			Таблица.Добавить();
		КонецЕсли;
		Строка = Таблица[Сч];
		Если ТипЗнч(Строка) = Тип("Структура") Тогда
			Строка.Вставить(Колонка, Элемент);
		Иначе
			Строка[Колонка] = Элемент;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ВыгрузитьКолонку(Таблица, Колонка) Экспорт
	#Если НЕ Клиент Тогда
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
			Возврат Таблица.ВыгрузитьКолонку(Колонка);
		КонецЕсли;
	#КонецЕсли
	Результат = Новый Массив;
	Для Каждого Строка Из Таблица Цикл
		Результат.Добавить(А1Э_Общее.ЗначениеСвойства(Строка, Колонка));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция Сортировать(Таблица, Знач Колонки) Экспорт
	#Если НЕ Клиент Тогда
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
			Таблица.Сортировать(Колонки);
			Возврат Таблица;
		КонецЕсли;
	#КонецЕсли
	Колонки = А1Э_Массивы.Массив(Колонки);
	Если Колонки.Количество() > 1 Тогда
		А1Э_Служебный.СлужебноеИсключение("Сортировка массива структур по нескольким колонкам не поддерживается в текущей версии!");
	КонецЕсли;
	ДанныеСортировки = А1Э_Строки.Разделить(Колонки[0], " ");
	ИмяКолонки = ДанныеСортировки[0];
	Если ДанныеСортировки.Количество() > 1 Тогда
		Направление = ДанныеСортировки[1];
	Иначе
		Направление = "Возр";
	КонецЕсли;
	Направление = А1Э_СтандартныеТипы.НаправлениеСортировкиПолучить(Направление);
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Сч = 0 По Таблица.Количество() - 1 Цикл
		Строка = Таблица[Сч];
		СписокЗначений.Добавить(Строка[ИмяКолонки], А1Э_Строки.ВСтроку(Сч));
	КонецЦикла;
	СписокЗначений.СортироватьПоЗначению(Направление);
	
	Результат = Новый Массив;
	Для Сч = 0 По СписокЗначений.Количество() - 1 Цикл
		Результат.Добавить(Таблица[А1Э_Числа.ВЧисло(СписокЗначений[Сч].Представление)]);
	КонецЦикла;
	
	Таблица = Результат;
	Возврат Таблица;
КонецФункции

// Возвращает соответствие вида <ЗначениеКолонки>:<Массив> (строк с соответствующим значением колонки)
//
// Параметры:
//  Таблица	 - ТаблицаЗначений,МассивСтруктур - 
//  Колонка	 - Строка - 
// 
// Возвращаемое значение:
//   - Соответствие
//
Функция РазбитьПоКолонке(Таблица, Колонка) Экспорт 
	Результат = Новый Соответствие;
	Для Каждого Строка Из Таблица Цикл
		Массив = Результат[Строка[Колонка]];
		Если Массив = Неопределено Тогда
			Массив = Новый Массив;
			Результат.Вставить(Строка[Колонка], Массив);
		КонецЕсли;
		Массив.Добавить(Строка);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция РазбитьВТаблицыПоКолонке(ТаблицаЗначений, Колонка) Экспорт
	Результат = Новый Соответствие;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		ТаблицаПриемник = Результат[Строка[Колонка]];
		Если ТаблицаПриемник = Неопределено Тогда
			ТаблицаПриемник = ТаблицаЗначений.СкопироватьКолонки();
			Результат.Вставить(Строка[Колонка], ТаблицаПриемник);
		КонецЕсли;
		СтрокаПриемник = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, Строка);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция РазбитьПоКолонкам(Таблица, Знач Колонки) Экспорт
	Колонки = А1Э_Массивы.Массив(Колонки);
	Результат = РазбитьПоКолонке(Таблица, Колонки[0]);
	Если Колонки.Количество() = 1 Тогда Возврат Результат; КонецЕсли;
	
	УсеченныеКолонки = А1Э_Массивы.Скопировать(Колонки);
	УсеченныеКолонки.Удалить(0);
	Для Каждого Пара Из Результат Цикл
		Результат.Вставить(Пара.Ключ, РазбитьПоКолонкам(Пара.Значение, УсеченныеКолонки));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция РазбитьВТаблицыПоКолонкам(Таблица, Знач Колонки) Экспорт
	Колонки = А1Э_Массивы.Массив(Колонки);
	Результат = РазбитьВТаблицыПоКолонке(Таблица, Колонки[0]);
	Если Колонки.Количество() = 1 Тогда Возврат Результат; КонецЕсли;
	
	УсеченныеКолонки = А1Э_Массивы.Скопировать(Колонки);
	УсеченныеКолонки.Удалить(0);
	Для Каждого Пара Из Результат Цикл
		Результат.Вставить(Пара.Ключ, РазбитьВТаблицыПоКолонкам(Пара.Значение, УсеченныеКолонки));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#Область ИзменениеСоставаСтрок
#Если НЕ Клиент Тогда
	Функция ИзменитьСоставСтрок(ТаблицаЗначений, ИсточникДанных, ВедущиеРеквизиты, СуммируемыйРеквизит, ПропорциональныеРеквизиты) Экспорт
		#Если Сервер И НЕ Сервер Тогда
			ТаблицаЗначений = Новый ТаблицаЗначений;		
		#КонецЕсли
		МассивВедущихРеквизитов = А1Э_Массивы.Массив(ВедущиеРеквизиты);
		МассивПропорциональныхРеквизитов = А1Э_Массивы.Массив(МассивПропорциональныхРеквизитов);
		
		Для Каждого Элемент Из ИсточникДанных Цикл
			ИзменитьСоставСтрокПоЭлементу(ТаблицаЗначений, Элемент,  МассивВедущихРеквизитов, СуммируемыйРеквизит, МассивПропорциональныхРеквизитов);
		КонецЦикла;
	КонецФункции
	
	Функция ИзменитьСоставСтрокПоЭлементу(ТаблицаЗначений, Элемент,  МассивВедущихРеквизитов, СуммируемыйРеквизит, МассивПропорциональныхРеквизитов) Экспорт
		ИзменениеСуммируемогоРеквизита = Элемент[СуммируемыйРеквизит];
		СтруктураОтбора = Новый Структура;
		Для Каждого ВедущийРеквизит Из МассивВедущихРеквизитов Цикл
			СтруктураОтбора.Вставить(ВедущийРеквизит);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Элемент);
		
		Строки = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() = 0 Тогда
			Строка = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ТаблицаЗначений[0]);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураОтбора);
			Строка[СуммируемыйРеквизит] = ИзменениеСуммируемогоРеквизита;
			Для Каждого ПропорциональныйРеквизит Из МассивПропорциональныхРеквизитов Цикл
				Строка[ПропорциональныйРеквизит] = ИзменениеСуммируемогоРеквизита;
			КонецЦикла;
			Возврат Строка;
		Иначе
			Строка = Строки[0];
			Если (Строка[СуммируемыйРеквизит] > 0 И ИзменениеСуммируемогоРеквизита > 0) 
				ИЛИ (Строка[СуммируемыйРеквизит] < 0 И ИзменениеСуммируемогоРеквизита) < 0 Тогда
				Строка = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, ТаблицаЗначений[0]);
				ЗаполнитьЗначенияСвойств(Строка, СтруктураОтбора);
				Строка[СуммируемыйРеквизит] = ИзменениеСуммируемогоРеквизита;
				Для Каждого ПропорциональныйРеквизит Из МассивПропорциональныхРеквизитов Цикл
					Строка[ПропорциональныйРеквизит] = ИзменениеСуммируемогоРеквизита;
				КонецЦикла;
				Возврат Строка;
			Иначе
				ИсходноеЗначение = ИзменениеСуммируемогоРеквизита;
				Пока Истина Цикл
					Если А1Э_Числа.Модуль(Строка[СуммируемыйРеквизит]) > А1Э_Числа.Модуль(ИзменениеСуммируемогоРеквизита) Тогда
						ИзменитьСПропорцией(Строка, СуммируемыйРеквизит, ИзменениеСуммируемогоРеквизита, МассивПропорциональныхРеквизитов);
						ИзменениеСуммируемогоРеквизита = 0;
					Иначе
						ИзменениеСуммируемогоРеквизита = ИзменениеСуммируемогоРеквизита + Строка[СуммируемыйРеквизит];
						ТаблицаЗначений.Удалить(Строка);
						Строки.Удалить(0);
						Если Строки.Количество() = 0 Тогда
							Прервать;
						Иначе
							Строка = Строки[0];
						КонецЕсли;
					КонецЕсли;
					Если ИзменениеСуммируемогоРеквизита >= 0 Тогда
						Возврат Строка;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецФункции 
	
	Функция ИзменитьСПропорцией(Строка, ИмяРеквизита, ИзменениеРеквизита, МассивПропорциональныхРеквизитов)
		Пропорция = 1 + ИзменениеРеквизита/Строка[ИмяРеквизита];
		Строка[ИмяРеквизита] = Строка[ИмяРеквизита] + ИзменениеРеквизита;
		Для Каждого Имя Из МассивПропорциональныхРеквизитов Цикл
			Строка[Имя] = Строка[Имя] * Пропорция;
		КонецЦикла;
	КонецФункции 
#КонецЕсли
#КонецОбласти 

#Область КонвертацияТаблиц

Функция ТекстЗапросаКонвертацииИзВременнойТаблицы(ТаблицаЗначений, МассивКонвертаций, ИмяВременнойТаблицы) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
		МассивКонвертаций = Новый Массив;
	#КонецЕсли
	
	СтруктураЗапроса = А1Э_Запросы.НовыйСтруктураЗапроса("ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	
	ИмяОсновнойТаблицы = "Таблица";
	ОсновнаяТаблица = А1Э_Запросы.НовыйИсточникДанныхЗапроса(ИмяОсновнойТаблицы, ИмяВременнойТаблицы);
	А1Э_Запросы.ДобавитьИсточникДанных(СтруктураЗапроса, ОсновнаяТаблица);
	
	МассивИменКонвертаций = Новый Массив;
	Для Каждого Конвертация Из МассивКонвертаций Цикл
		Если ТаблицаЗначений.Колонки.Найти(Конвертация.Имя) = Неопределено Тогда
			Сообщить("Для конвертации " + Конвертация.Имя + " не найден источник данных в конвертируемой таблице!");
			Продолжить;
		КонецЕсли;
		
		ИмяКонвертации = Конвертация.КолонкаРезультат;
		Если МассивИменКонвертаций.Найти(ИмяКонвертации) <> Неопределено Тогда
			А1Э_Служебный.СлужебноеИсключение("Дублирование имен конвертаций!");
		КонецЕсли;
		МассивИменКонвертаций.Добавить(ИмяКонвертации);
		
		ИмяИсточникаДанных = "Конвертация_" + Конвертация.Имя;
		ИсточникДанных = А1Э_Запросы.НовыйИсточникДанныхЗапроса(ИмяИсточникаДанных, Конвертация.ИсточникДанных);
		А1Э_Запросы.ДобавитьИсточникДанных(СтруктураЗапроса, ИсточникДанных);
		
		А1Э_Запросы.ДобавитьПоля(СтруктураЗапроса, 
		А1Э_Запросы.НовыйПолеЗапроса(ИмяКонвертации, А1Э_Запросы.УникальноеЗначение(ИмяИсточникаДанных + ".Ссылка"), "ВТексте"));
		
		Если Конвертация.СтрокаСоединения <> "" Тогда
			СтрокаСоединения = Конвертация.СтрокаСоединения;
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ОсновнаяТаблица", ИмяОсновнойТаблицы);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИсточникДанных", ИмяИсточникаДанных);
		Иначе
			СтрокаСоединения = ИмяОсновнойТаблицы + "." + Конвертация.Имя + " = " + ИмяИсточникаДанных + "." + Конвертация.РеквизитПоиска; 
		КонецЕсли;	
		А1Э_Запросы.ДобавитьСоединение(ОсновнаяТаблица, 
		А1Э_Запросы.НовыйСоединениеЗапроса(ИмяИсточникаДанных, "ЛЕВОЕ", СтрокаСоединения));
		
	КонецЦикла;
	
	МассивПолей = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если МассивИменКонвертаций.Найти(Колонка.Имя) = Неопределено Тогда
			МассивПолей.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	А1Э_Запросы.ДобавитьПоля(СтруктураЗапроса, МассивПолей);
	
	Возврат А1Э_Запросы.ТекстЗапросаИзСтруктуры(СтруктураЗапроса);
КонецФункции 

#Если НЕ Клиент Тогда
	
	Функция СоздатьКолонкиПоМассивуСтруктур(ТаблицаЗначений, МассивСтруктур, ГлубокийАнализ = Истина)
		Если ГлубокийАнализ Тогда
			МассивАнализа = МассивСтруктур;
		Иначе
			МассивАнализа = А1Э_Массивы.Создать(МассивСтруктур[0]);
		КонецЕсли;
		#Если Сервер И НЕ Сервер Тогда
			МассивАнализа = Новый Массив;		
		#КонецЕсли
		
		СтруктурыКолонок = Новый Соответствие;
		Для Каждого Структура Из МассивАнализа Цикл
			#Если Сервер И НЕ Сервер Тогда
				Структура = Новый Структура;		
			#КонецЕсли 
			Для Каждого Пара Из Структура Цикл
				Записывать = Ложь;
				СтруктураКолонки = СтруктурыКолонок[Пара.Ключ];
				Если СтруктураКолонки = Неопределено Тогда
					СтруктураКолонки = НовыйСтруктураКолонки(Пара.Ключ);
					СтруктурыКолонок.Вставить(Пара.Ключ, СтруктураКолонки);
				КонецЕсли;
				Тип = ТипЗнч(Пара.Значение);
				Если СтруктураКолонки.МассивТипов.Найти(Тип) = Неопределено Тогда
					СтруктураКолонки.МассивТипов.Добавить(Тип);
				КонецЕсли;
			КонецЦикла
		КонецЦикла;
		Для Каждого Пара Из СтруктурыКолонок Цикл
			ТаблицаЗначений.Колонки.Добавить(Пара.Значение.Имя, Новый ОписаниеТипов(Пара.Значение.МассивТипов,,,Новый КвалификаторыЧисла(30,10),Новый КвалификаторыСтроки(200)));
		КонецЦикла;
	КонецФункции 
	
	Функция Конвертировать(ТаблицаЗначений, МассивКонвертаций) Экспорт  
		МассивТекстов = Новый Массив;
		ИмяВременнойТаблицы = "Таблица";
		МассивТекстов.Добавить(ТекстЗапросаПомещенияВоВременнуюТаблицу(ТаблицаЗначений, ИмяВременнойТаблицы));
		МассивТекстов.Добавить(ТекстЗапросаКонвертацииИзВременнойТаблицы(ТаблицаЗначений, МассивКонвертаций, ИмяВременнойТаблицы));
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(МассивТекстов, ";" + Символы.ПС);
		Запрос.УстановитьПараметр(ИмяВременнойТаблицы, ТаблицаЗначений);
		
		Возврат Запрос.Выполнить().Выгрузить();
	КонецФункции
	
	Функция КонвертироватьКолонкуВЧисло(ТаблицаЗначений, ИмяКолонки) 
		#Если Сервер И НЕ Сервер Тогда
			ТаблицаЗначений = Новый ТаблицаЗначений;		
		#КонецЕсли
		Колонка = ТаблицаЗначений.Колонки[ИмяКолонки];
		ИмяВременнойКолонки = ПолучитьИмяВременнойКолонки(ТаблицаЗначений, ИмяКолонки);
		ТаблицаЗначений.Колонки.Добавить(ИмяВременнойКолонки, А1Э_Числа.ОписаниеТипа(30,10), Колонка.Заголовок, Колонка.Ширина);
		Сч = -1;
		Пока Сч < ТаблицаЗначений.Количество() - 1 Цикл
			Сч = Сч + 1;
			Строка = ТаблицаЗначений[Сч];
			СтроковоеЗначение = Строка[ИмяКолонки];
			СтроковоеЗначение = СтрЗаменить(СтрЗаменить(СтроковоеЗначение, " ",""), Символы.НПП, "");
			Попытка
				Строка[ИмяВременнойКолонки] = Число(СтроковоеЗначение);
			Исключение
				Строка[ИмяВременнойКолонки] = 0;
			КонецПопытки;
		КонецЦикла;
		ТаблицаЗначений.Колонки.Удалить(ИмяКолонки);
		ТаблицаЗначений.Колонки[ИмяВременнойКолонки].Имя = ИмяКолонки;
	КонецФункции
	
	Функция ПолучитьИмяВременнойКолонки(ТаблицаЗначений, ИмяКолонки) Экспорт 
		#Если Сервер И НЕ Сервер Тогда
			ТаблицаЗначений = Новый ТаблицаЗначений;		
		#КонецЕсли 
		Суффикс = "_Временная";
		Сч = -1;
		Пока ИСТИНА Цикл
			Сч = Сч + 1;
			ИмяВременнойКолонки = ИмяКолонки + Суффикс + А1Э_Строки.ВСтроку(Сч);
			Если ТаблицаЗначений.Колонки.Найти(ИмяВременнойКолонки) = Неопределено Тогда
				Возврат ИмяВременнойКолонки;
			КонецЕсли;
		КонецЦикла;
	КонецФункции 
	
	Функция ПроверитьКонвертации(ТаблицаЗначений, МассивКонвертаций) Экспорт
		Для Каждого Конвертация Из МассивКонвертаций Цикл
			Если Конвертация.ПроверятьЗаполненность Тогда
				Заполненность = Истина;
				Для Каждого Строка Из ТаблицаЗначений Цикл
					Если ЗначениеЗаполнено(Строка[Конвертация.Имя]) И НЕ ЗначениеЗаполнено(Строка[Конвертация.КолонкаРезультат]) Тогда
						Сообщить("В строке № " + Строка.НомерСтрокиА1 + " не удалось заполнить колонку " + Конвертация.КолонкаРезультат);
						Заполненность = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если Заполненность Тогда
					Сообщить("В конвертации " + Конвертация.КолонкаРезультат + " все значения заполнены!");
				КонецЕсли;
			КонецЕсли;
			Если Конвертация.ПроверятьУникальность Тогда
				Уникальность = Истина;
				Для Каждого Строка Из ТаблицаЗначений Цикл
					Если ЗначениеЗаполнено(Строка[Конвертация.Имя]) И Строка[Конвертация.КолонкаРезультат] = "%НЕУНИКАЛЬНОЕЗНАЧЕНИЕ%" Тогда
						Сообщить("В строке № " + Строка.НомерСтрокиА1 + " не удалось однозначно определить " + Конвертация.КолонкаРезультат);
						Уникальность = Ложь;	
					КонецЕсли;
				КонецЦикла;
				Если Уникальность Тогда
					Сообщить("В конвертации " + Конвертация.КолонкаРезультат + " все значения уникальны!");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецФункции
	
	Функция КонвертироватьКолонкиВЧисла(ТаблицаЗначений, ИменаКолонок) Экспорт
		МассивКолонок = А1Э_Массивы.Массив(ИменаКолонок);
		Для Каждого Элемент Из МассивКолонок Цикл
			КонвертироватьКолонкуВЧисло(ТаблицаЗначений, Элемент);
		КонецЦикла;
	КонецФункции
	
#КонецЕсли
#КонецОбласти 

#Область РаспознаваниеЗначенийВМассивахСтруктур

#Если НЕ Клиент Тогда
	// Для таблицы (или массива структур) заполняет колонку (новую или существующую) по значению существующей колонки.
	// Полезно при загрузке данных из внешних источников чтбы не делать запросы в цикле ("НайтиПоНаименованию") и не городить трудночитаемые запросы.
	//
	// Параметры:
	//  Объект					 - МассивСтруктур, Структура - данные для распознавания. 
	//  Колонка					 - Строка - имя колонки, которая будет распознана 
	//  Алгоритм				 - Строка, Структура - алгоритм для распознавания.
	//    Строка - воспринимается как текст запроса, которые будет выполнен для распознавания. 
	//      В запрос будет передан параметр "Ключи", в котором будут все значения, которые надо распознать.
	//      Ожидается, что в результате запроса будут колонки "Ключ" и "Значение", где "Ключ" - значение для распознавания, "Значение" - результат распознавания.
	//    Структура - описывает другие варианты распознавания. Всегда содержит ключ "ВариантРаспознавания" и в зависимости от этого ключа другие ключи.
	//		  Рекомендуется использовать вспомогательные функции.
	//      "ПоРеквизиту" - см. функцию "ВариантРаспознаванияПоРеквизиту".
	//      "ПоДопРеквизиту" - см. функцию "ВариантРаспознаванияПоДопРеквизиту".
	//      "Реквизит" - см. функцию "ВариантРаспознаванияРеквизит".
	//		"ДопРеквизит" - см. функцию "ВариантРаспознаванияДопРеквизит"
	//	
	//  НоваяКолонка			 - Строка - имя колонки, в которую будет записано распознанное значение. Если не заполнена, то будет перезаписана существующая колонка. 
	//  Путь					 - Строка - если объект представляет чо-то сложное вроде МассивСтруктур1МассивовСтруктур2Структур3, 
	//  а мы хотим распознать значения в структурах3, то нужно передать путь следующего вида: "<КлючСтруктуры1>,<КлючСтруктуры2>"
	//  ДополнительныеПараметры	 - Структура - может содержать ключи:
	//    ПараметрыЗапроса - Структура - дополнительные параметря для подстановки в запрос.
	//    ПроверятьЗаполнение - Булево - если истина, то функция выдаст сообщения об ошибке и вернет ЛОжь при наличии незаполненных значений.
	//    Идентификаторы - Строка - разделенный запятыми перечень путей к идентификаторам. Они используются для детализации сообщений об ошибках.
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция РаспознатьКолонку(Объект, Колонка, Знач НоваяКолонка, Алгоритм = Неопределено, Знач Путь = "", Знач ДополнительныеПараметры = Неопределено) Экспорт
		Путь = А1Э_Массивы.Массив(Путь);
		Колонки = А1Э_Массивы.Создать(Новый Структура("Имя", Колонка));
		Возврат РаспознатьКолонки(Объект, Колонки, НоваяКолонка, Алгоритм, Путь, ДополнительныеПараметры);
	КонецФункции 
	
	// Работает аналогично функции А1Э_ТаблицыЗначений.РаспознатьКолонку(), но источником данных является несколько колонок
	// Колонки - МассивСтруктур - структуры содержат ключи Имя (строка) и Тип (ОписаниеТипов, Строка). Если Тип не указан, предполагается строка
	// Алгоритм - Строка - Текст запроса распознавания. В запросе будет доступна временная таблица "Ключи", полученная из объекта.
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция РаспознатьКолонки(Объект, Знач Колонки, Знач НоваяКолонка, Алгоритм = Неопределено, Знач Путь = "", Знач ДополнительныеПараметры = Неопределено) Экспорт
		Если ТипЗнч(Алгоритм) = Тип("Структура") Тогда
			Если НЕ Алгоритм.Свойство("ВариантРаспознавания") Тогда
				Сообщить("Не указан вариант распознавания для колонки " + НоваяКолонка);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Путь = А1Э_Массивы.Массив(Путь);
		ДополнительныеПараметры = А1Э_Структуры.Структура(ДополнительныеПараметры);
		ОбъектыКРаспознаванию = ДобавитьОбъектыКРаспознаванию(Объект, Путь);
		
		Если ОбъектыКРаспознаванию.Данные.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОписанияКолонок = ОписанияКолонок(Колонки, ОбъектыКРаспознаванию);
		ЗначенияКРаспознаванию = ПолучитьЗначенияКРаспознаванию(ОбъектыКРаспознаванию.Данные, ОписанияКолонок);		
		
		Если Алгоритм = Неопределено Тогда
			ЗначенияКРаспознаванию = РаспознатьБезОбработки(ОписанияКолонок, ЗначенияКРаспознаванию, ДополнительныеПараметры);
		ИначеЕсли ТипЗнч(Алгоритм) = Тип("Строка") Тогда
			ЗначенияКРаспознаванию = РаспознатьЗапросом(Алгоритм, ОписанияКолонок, ЗначенияКРаспознаванию, ДополнительныеПараметры); 
		ИначеЕсли ТипЗнч(Алгоритм) = Тип("Структура") Тогда
			ВариантРаспознавания = А1Э_Структуры.ЗначениеСвойства(Алгоритм, "ВариантРаспознавания");
			Если ВариантРаспознавания = "ПоРеквизиту" Тогда
				ЗначенияКРаспознаванию = РаспознатьПоРеквизиту(Алгоритм, ОписанияКолонок, ЗначенияКРаспознаванию, ДополнительныеПараметры);
			ИначеЕсли ВариантРаспознавания = "ПоДопРеквизиту" Тогда
				ЗначенияКРаспознаванию = РаспознатьПоДопРеквизиту(Алгоритм, ОписанияКолонок, ЗначенияКРаспознаванию, ДополнительныеПараметры);	
			ИначеЕсли ВариантРаспознавания = "Реквизит" Тогда
				ЗначенияКРаспознаванию = РаспознатьРеквизит(Алгоритм, ОписанияКолонок, ЗначенияКРаспознаванию, ДополнительныеПараметры);
			ИначеЕсли ВариантРаспознавания = "ДопРеквизит" Тогда
				ЗначенияКРаспознаванию = РаспознатьДопРеквизит(Алгоритм, ОписанияКолонок, ЗначенияКРаспознаванию, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
		Результат = ПеренестиРаспознанныеЗначенияВОбъекты(Объект, ОбъектыКРаспознаванию, ЗначенияКРаспознаванию, ОписанияКолонок, НоваяКолонка, ДополнительныеПараметры);
		
		Возврат Результат;
	КонецФункции
	
#КонецЕсли

// При выполнении распознавания в новую колонку подставляются указанные реквизиты значений в исходной колонке.
//
// Параметры:
//  Объект	 - Строка - полное имя объекта для подстановки в запрос. Пример: "Справочник.Номенклатура" 
//  Реквизит - Строка - имя реквизита. Пример: "Наименование". 
// 
// Возвращаемое значение:
//   - 
//
Функция ВариантРаспознаванияРеквизит(Объект, Реквизит) Экспорт 
	Возврат А1Э_Структуры.Создать(
	"ВариантРаспознавания", "Реквизит",
	"Объект", Объект,
	"Реквизит", Реквизит,
	);	
КонецФункции

// При выполнении распознавания в новую колонку подставляются указанные дополнительные реквизиты/сведения значений в исходной колонке.
//
// Параметры:
//  Реквизит 	 - Строка - имя доп. реквизита. 
//  ВидРеквизита - Строка - вид доп. реквизита. "ДС" для доп. сведений, "ДР" для доп. реквизитов.
//	Объект	 	 - Строка - полное имя объекта для подстановки в запрос. Пример: "Справочник.Номенклатура".
// 
// Возвращаемое значение:
//   - 
Функция ВариантРаспознаванияДопРеквизит(Реквизит, ВидРеквизита = "ДС", Объект = Неопределено) Экспорт
	Возврат А1Э_Структуры.Создать(
	"ВариантРаспознавания", "ДопРеквизит", 
	"Реквизит", Реквизит,
	"ВидРеквизита", ВидРеквизита,
	"Объект", Объект,
	);	
КонецФункции

// При выполнении распознавания в новую колонку подставляются объекты, у которых указанный реквизит равен значению в исходной колонке. 
// При наличии нескольких таких объектов может быть подставлен любой. 
//
// Параметры:
//  Объект	 - Строка - полное имя объекта для подстановки в запрос. Пример: "Справочник.Номенклатура"	 - 
//  Реквизит - Строка - имя реквизита. Пример: "Наименование".
// 
// Возвращаемое значение:
//   - 
//
Функция ВариантРаспознаванияПоРеквизиту(Объект, Реквизит) Экспорт
	Возврат А1Э_Структуры.Создать(
	"ВариантРаспознавания", "ПоРеквизиту",
	"Объект", Объект,
	"Реквизит", Реквизит,
	);
КонецФункции

// При выполнении распознавания в новую колонку подставляются объекты, у которых указанный допреквизит/сведение равен значению в исходной колонке. 
// При наличии нескольких таких объектов может быть подставлен любой. 
//
// Параметры:
//  Реквизит 	 - Строка - имя доп. реквизита. 
//  ВидРеквизита - Строка - вид доп. реквизита. "ДС" для доп. сведений, "ДР" для доп. реквизитов.
//	Объект	 	 - Строка - полное имя объекта для подстановки в запрос. Пример: "Справочник.Номенклатура".	
// 
// Возвращаемое значение:
//   - 
//
Функция ВариантРаспознаванияПоДопРеквизиту(Реквизит, ВидРеквизита = "ДС", Объект = Неопределено) Экспорт 
	Возврат А1Э_Структуры.Создать(
	"ВариантРаспознавания", "ПоДопРеквизиту", 
	"Реквизит", Реквизит,
	"ВидРеквизита", ВидРеквизита,
	"Объект", Объект,
	);	
КонецФункции

#Область Служебно
#Если НЕ Клиент Тогда
	
	Функция ОписанияКолонок (Знач Колонки, ОбъектыКРаспознаванию) 
		Колонки = А1Э_Массивы.Массив(Колонки);
		ОписанияКолонок = А1Э_Массивы.Скопировать(Колонки);
		ОбразецТипов = ОбъектыКРаспознаванию.Данные[0];
		Сч = -1;
		Пока Сч < ОписанияКолонок.Количество() - 1 Цикл
			Сч = Сч + 1;
			Колонка = ОписанияКолонок[Сч];
			Если ТипЗнч(Колонка) = Тип("Строка") Тогда
				СтруктураКолонки = Новый Структура("Имя,Тип", Колонка, ТипОбразца(ОбразецТипов, Колонка));
				ОписанияКолонок[Сч] = СтруктураКолонки; 
			ИначеЕсли ТипЗнч(Колонка) = Тип("Структура") Тогда
				Если НЕ Колонка.Свойство("Тип") Тогда
					Колонка.Вставить("Тип", ТипОбразца(ОбразецТипов, Колонка.Имя));
				КонецЕсли;
			Иначе
				А1Э_Служебный.СлужебноеИсключение("Элементами массива колонок распознавания могут быть только строки и структуры!");
			КонецЕсли;
		КонецЦикла;
		Возврат ОписанияКолонок;
	КонецФункции
	
	Функция ТипОбразца(Образец, Колонка)
		Если Образец = Неопределено Тогда
			Возврат "Строка:100";			
		КонецЕсли;
		ТипОбразца = ТипЗнч(Образец[Колонка]);
		Если ТипОбразца = Тип("Строка") Тогда
			ТипОбразца = "Строка:100"
		КонецЕсли;
		Возврат ТипОбразца;
	КонецФункции
	
	Функция ДобавитьОбъектыКРаспознаванию(Объект, Путь, МассивЭлементов = Неопределено, МассивОписанийПути = Неопределено, ТекущийПуть = Неопределено)
		Если МассивЭлементов = Неопределено Тогда 
			МассивЭлементов = Новый Массив;
		КонецЕсли;
		Если МассивОписанийПути = Неопределено Тогда 
			МассивОписанийПути = Новый Массив;
		КонецЕсли;
		Если ТекущийПуть = Неопределено Тогда
			ТекущийПуть = Новый Массив;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("Массив") Или ТипЗнч(Объект) = Тип("ДанныеФормыКоллекция") Или ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
			Сч = -1;
			Пока Сч < Объект.Количество() - 1 Цикл
				Сч = Сч + 1;
				Элемент = Объект[Сч];
				ПутьКЭлементу = А1Э_Массивы.Скопировать(ТекущийПуть);
				ПутьКЭлементу.Добавить(Сч);
				ДобавитьОбъектыКРаспознаванию(Элемент, Путь, МассивЭлементов, МассивОписанийПути, ПутьКЭлементу);
			КонецЦикла;
		Иначе
			Если Путь.Количество() = 0 Тогда
				МассивЭлементов.Добавить(Объект);
				МассивОписанийПути.Добавить(ТекущийПуть);
			Иначе
				УкороченныйПуть = А1Э_Массивы.Скопировать(Путь);
				ИмяКолонки = УкороченныйПуть[0];
				УкороченныйПуть.Удалить(0);
				ДобавитьОбъектыКРаспознаванию(Объект[ИмяКолонки], УкороченныйПуть, МассивЭлементов, МассивОписанийПути, ТекущийПуть);
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Данные", МассивЭлементов);
		Результат.Вставить("ОписанияПути", МассивОписанийПути);
		Возврат Результат;	
	КонецФункции 
	
	Функция ЗначениеЭлементаОбъекта(Объект, Имя, Путь, ОписаниеПути)  
		Если ТипЗнч(Объект) = Тип("Массив") Тогда
			УкороченноеОписание = А1Э_Массивы.Скопировать(ОписаниеПути);
			ТекущийИндекс = УкороченноеОписание[0];
			УкороченноеОписание.Удалить(0);
			Возврат ЗначениеЭлементаОбъекта(Объект[ТекущийИндекс], Имя, Путь, УкороченноеОписание);
		Иначе
			Если Путь.Количество() = 0 Тогда
				Возврат Объект[Имя];
			Иначе
				УкороченныйПуть = А1Э_Массивы.Скопировать(Путь);
				ИмяКолонки = УкороченныйПуть[0];
				УкороченныйПуть.Удалить(0);
				Возврат ЗначениеЭлементаОбъекта(Объект[ИмяКолонки], Имя, УкороченныйПуть, ОписаниеПути);
			КонецЕсли;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьЗначенияКРаспознаванию(ОбъектыКРаспознаванию, Колонки)
		Если Колонки.Количество() = 1 Тогда
			Значения = Новый Соответствие;
			Для Каждого ОбъектКРаспознаванию Из ОбъектыКРаспознаванию Цикл
				Значения.Вставить(А1Э_Общее.ЗначениеСвойства(ОбъектКРаспознаванию, Колонки[0].Имя));
			КонецЦикла;
		Иначе
			Значения = Новый ТаблицаЗначений;
			Для Каждого Колонка Из Колонки Цикл
				Значения.Колонки.Добавить(Колонка.Имя, А1Э_СтандартныеТипы.ОписаниеТиповПолучить(Колонка.Тип));
			КонецЦикла;
			Для Каждого ОбъектКРаспознаванию Из ОбъектыКРаспознаванию Цикл
				ЗначениеКРаспознаванию = Значения.Добавить();
				ЗаполнитьЗначенияСвойств(ЗначениеКРаспознаванию, ОбъектКРаспознаванию);
			КонецЦикла;
		КонецЕсли;
		
		Возврат Значения;
		
	КонецФункции
	
	Функция ИдентификаторыОбъектовРаспознавания(ДополнительныеПараметры)
		Идентификаторы = А1Э_Массивы.Массив(А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "Идентификаторы"));
		Сч = -1;
		Пока Сч < Идентификаторы.Количество() - 1 Цикл
			Сч = Сч + 1;
			Идентификатор = Идентификаторы[Сч];
			Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
				ПоложениеТочки = СтрНайти(Идентификатор, ".", НаправлениеПоиска.СКонца);
				Структура = Новый Структура("Имя,Путь", "", Новый Массив);
				Если ПоложениеТочки > 0 Тогда
					Структура.Имя = Сред(Идентификатор, ПоложениеТочки + 1);
					Структура.Путь = А1Э_Строки.Разделить(Лев(Идентификатор, ПоложениеТочки - 1), ".", Ложь);
				Иначе
					Структура.Имя = Идентификатор;
				КонецЕсли;
				Идентификаторы[Сч] = Структура;
			КонецЕсли;
		КонецЦикла;
		Возврат Идентификаторы;
	КонецФункции 
	
	Функция ПолучитьРаспознанноеЗначение(ОбъектКРаспознаванию, Колонки, ЗначенияКРаспознаванию, СтруктураПоиска = Неопределено) 
		Если Колонки.Количество() = 1 Тогда
			Возврат ЗначенияКРаспознаванию[А1Э_Общее.ЗначениеСвойства(ОбъектКРаспознаванию, Колонки[0].Имя)];
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		Для Каждого Колонка Из Колонки Цикл
			СтруктураПоиска.Вставить(Колонка.Имя, ОбъектКРаспознаванию[Колонка.Имя]);
		КонецЦикла;
		СтрокиКРаспознаванию = ЗначенияКРаспознаванию.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКРаспознаванию.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат СтрокиКРаспознаванию[0].Значение; 
	КонецФункции
	
	Функция ПеренестиРаспознанныеЗначенияВОбъекты(Объект, ОбъектыКРаспознаванию, ЗначенияКРаспознаванию, Колонки, НоваяКолонка, ДополнительныеПараметры)
		ПроверятьЗаполнение = А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "ПроверятьЗаполнение", Ложь);
		Если ПроверятьЗаполнение = Истина Тогда
			Результат = Истина;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
		Идентификаторы = ИдентификаторыОбъектовРаспознавания(ДополнительныеПараметры);		
		
		Сч = -1;
		Пока Сч < ОбъектыКРаспознаванию.Данные.Количество() - 1 Цикл
			Сч = Сч + 1;
			ОбъектКРаспознаванию = ОбъектыКРаспознаванию.Данные[Сч];
			ОписаниеПути = ОбъектыКРаспознаванию.ОписанияПути[Сч]; 
			РаспознанноеЗначение = ПолучитьРаспознанноеЗначение(ОбъектКРаспознаванию, Колонки, ЗначенияКРаспознаванию);	
			Если НЕ ЗначениеЗаполнено(А1Э_Общее.ЗначениеСвойства(ОбъектКРаспознаванию, НоваяКолонка)) Тогда
				Если ПроверятьЗаполнение И НЕ ЗначениеЗаполнено(РаспознанноеЗначение) Тогда
					Текст = "";
					Если Идентификаторы.Количество() > 0 Тогда
						Текст = "В данных:";
						Для Каждого Идентификатор Из Идентификаторы Цикл
							Текст = Текст + " " + Идентификатор.Имя + ":" + ЗначениеЭлементаОбъекта(Объект, Идентификатор.Имя, Идентификатор.Путь, ОписаниеПути) + "; "; 
						КонецЦикла;
						Текст = А1Э_Строки.Обрубить(Текст, 2) + Символы.ПС;
					КонецЕсли;
					Текст = Текст + "Не удалось корректно распознать колонку " + НоваяКолонка + " на основании данных:" + Символы.ПС;
					Для Каждого Колонка Из Колонки Цикл
						Текст = Текст + Колонка.Имя + ": " + А1Э_Структуры.ЗначениеСвойства(ОбъектКРаспознаванию, Колонка.Имя) + "; ";
					КонецЦикла;
					Текст = А1Э_Строки.Обрубить(Текст, 2);
					Сообщить(Текст);
					Результат = Ложь;
				КонецЕсли;
				Если ТипЗнч(ОбъектКРаспознаванию) = Тип("Структура") Тогда
					ОбъектКРаспознаванию.Вставить(НоваяКолонка, РаспознанноеЗначение);
				Иначе
					ОбъектКРаспознаванию[НоваяКолонка] = РаспознанноеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	#Область РаспознаваниеБезОбработки
	
	Функция РаспознатьБезОбработки(Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры)
		Если Колонки.Количество() = 1 Тогда
			Для Каждого Пара Из ЗначенияКРаспознаванию Цикл
				ЗначенияКРаспознаванию.Вставить(Пара.Ключ, Пара.Ключ);
			КонецЦикла;
		Иначе
			Для Каждого Строка Из ЗначенияКРаспознаванию Цикл
				РезультатРаспознавания = "";
				Для Каждого Колонка Из Колонки Цикл
					РезультатРаспознавания = РезультатРаспознавания + Строка[Колонка];
				КонецЦикла;
				Строка.А1_РезультатРаспознавания = РезультатРаспознавания;
			КонецЦикла;
			Для Каждого Колонка Из Колонки Цикл
				ЗначенияКРаспознаванию.Индексы.Добавить(Колонка.Имя);
			КонецЦикла;
		КонецЕсли;
		Возврат ЗначенияКРаспознаванию;
	КонецФункции
	
	#КонецОбласти 
	
	#Область РаспознаваниеЗапросом
	
	Функция РаспознатьЗапросом(ТекстЗапроса, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры)
		//ТУДУ: сделать автоматическую группировку результатов пользовательского запроса.
		//ТУДУ: сделать проверку на неуникальность.
		Если ТипЗнч(ЗначенияКРаспознаванию) = Тип("Соответствие") Тогда
			ЗначенияДляЗапроса = Новый Массив;
			Для Каждого Пара Из ЗначенияКРаспознаванию Цикл
				ЗначенияДляЗапроса.Добавить(Пара.Ключ);
			КонецЦикла;
		Иначе
			ЗначенияДляЗапроса = ЗначенияКРаспознаванию
		КонецЕсли;
		
		Параметры = Новый Структура("Ключи", ЗначенияДляЗапроса);
		
		ИтоговыйТекстЗапроса = ТекстЗапросаРаспознаванияКолонок(ТекстЗапроса, ЗначенияДляЗапроса); 
		РезультатЗапроса = РезультатЗапросаРаспознавания(ИтоговыйТекстЗапроса, Колонки, Параметры, ДополнительныеПараметры);
		Если Колонки.Количество() = 1 Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗначенияКРаспознаванию.Вставить(Выборка.Ключ, Выборка.Значение);
			КонецЦикла;
		Иначе
			ЗначенияКРаспознаванию = РезультатЗапроса.Выгрузить();
			Для Каждого Колонка Из Колонки Цикл
				ЗначенияКРаспознаванию.Индексы.Добавить(Колонка.Имя);
			КонецЦикла;
		КонецЕсли;
		Возврат ЗначенияКРаспознаванию;
	КонецФункции
	
	Функция ТекстЗапросаРаспознаванияКолонок(Алгоритм, ЗначенияКРаспознаванию)
		МассивЧастей = Новый Массив;
		Если ТипЗнч(ЗначенияКРаспознаванию) = Тип("ТаблицаЗначений") Тогда
			МассивЧастей.Добавить(А1Э_ТаблицыЗначений.ТекстЗапросаПомещенияВоВременнуюТаблицу(ЗначенияКРаспознаванию, "Ключи"));
		КонецЕсли;
		МассивЧастей.Добавить(Алгоритм);
		Возврат А1Э_Запросы.Соединить(МассивЧастей);
	КонецФункции 
	
	Функция РезультатЗапросаРаспознавания(ТекстЗапроса, Колонки, Параметры, ДополнительныеПараметры)
		Запрос = Новый Запрос(ТекстЗапроса);
		А1Э_Запросы.ПодставитьПараметрыВЗапрос(Запрос, Параметры);
		Если ТипЗнч(А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "ПараметрыЗапроса")) = Тип("Структура") Тогда
			Для Каждого Пара Из ДополнительныеПараметры.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(Пара.Ключ, Пара.Значение);
			КонецЦикла;
		КонецЕсли;
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			А1Э_Служебный.СлужебноеИсключение("При распознавании колонки не удалось выполнить запрос  по причине: " + ОписаниеОшибки);
		КонецПопытки;
		Если Колонки.Количество() > 1 Тогда
			Для Каждого Колонка Из Колонки Цикл
				ПроверитьНаличиеКолонкиВЗапросеРаспознавания(Результат, Колонка.Имя);
			КонецЦикла;
		Иначе
			ПроверитьНаличиеКолонкиВЗапросеРаспознавания(Результат, "Ключ");
		КонецЕсли;
		ПроверитьНаличиеКолонкиВЗапросеРаспознавания(Результат, "Значение");
		Возврат Результат;
	КонецФункции
	
	Функция ПроверитьНаличиеКолонкиВЗапросеРаспознавания(РезультатЗапроса, Колонка)
		Если РезультатЗапроса.Колонки.Найти(Колонка) = Неопределено Тогда
			А1Э_Служебный.СлужебноеИсключение("При распознавании колонки в результате запроса отсутствует обязательная колонка <" + Колонка + ">!");
		КонецЕсли;
		Возврат Истина;
	КонецФункции 
	
	#КонецОбласти 
	
	#Область Распознавание_ПоРеквизиту
	
	Функция РаспознатьПоРеквизиту(Алгоритм, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры)
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Реквизит КАК Ключ,
		|	МАКСИМУМ(Таблица.Ссылка) КАК Значение
		|ИЗ
		|	ТаблицаБазыДанных КАК Таблица
		|ГДЕ
		|	Таблица.Реквизит В(&Ключи)
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Реквизит";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаБазыДанных", Алгоритм.Объект);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Реквизит", Алгоритм.Реквизит);
		Возврат РаспознатьЗапросом(ТекстЗапроса, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры);
	КонецФункции
	
	#КонецОбласти 
	
	#Область Распознавание_ПоДопРеквизиту
	
	Функция РаспознатьПоДопРеквизиту(Алгоритм, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры)
		ТекстЗапроса = А1Э_ДопРеквизиты.ТекстЗапросаОпределенияОбъектовПоЗначению(
		А1Э_Структуры.ЗначениеСвойства(Алгоритм, "ВидРеквизита", "ДР"),
		А1Э_Структуры.ЗначениеСвойства(Алгоритм, "Объект"));
		ДополнительныеПараметры.Вставить("ПараметрыЗапроса", Новый Структура("Имя", Алгоритм.Реквизит));
		Возврат РаспознатьЗапросом(ТекстЗапроса, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры);
	КонецФункции
	
	#КонецОбласти 
	
	#Область Распознавание_Реквизит
	
	Функция РаспознатьРеквизит(Алгоритм, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры)
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ключ,
		|	МАКСИМУМ(Таблица.Реквизит) КАК Значение
		|ИЗ
		|	ТаблицаБазыДанных КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&Ключи)
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаБазыДанных", Алгоритм.Объект);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Реквизит", Алгоритм.Реквизит);
		Возврат РаспознатьЗапросом(ТекстЗапроса, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры);
	КонецФункции
	
	#КонецОбласти
	
	#Область Распознавание_ДопРеквизит
	
	Функция РаспознатьДопРеквизит(Алгоритм, Колонки, ЗначенияКРаспознаванию, ДополнительныеПараметры)
		Ссылки = Новый Массив;
		Для Каждого Пара Из ЗначенияКРаспознаванию Цикл
			Ссылки.Добавить(Пара.Ключ);
		КонецЦикла;
		Возврат А1Э_ДопРеквизиты.ЗначениеСсылок(Ссылки, Алгоритм.Реквизит, А1Э_Структуры.ЗначениеСвойства(Алгоритм, "ВидРеквизита", "ДР")); 
	КонецФункции
	
	#КонецОбласти 
#КонецЕсли
#КонецОбласти 

#КонецОбласти

#Область СверткаТаблицыЗначений
#Если НЕ Клиент Тогда
	
	// Позволяет свернуть таблицу значений, используя различные агрегатные функции (максимум, минимум, среднее).
	// В отличие от стандартной свертки по умолчанию рассматривает все числовые колонки как то, что надо суммировать, а все прочие - как измерения.
	//
	// Параметры:
	//  ТаблицаЗначений	 - ТаблицаЗначения	 - 
	//  ПараметрыСвертки - Структура - содержит следующие ключи (строковые ключи преобразовываются в массив с разделением через запятую).
	//		* Измерения - Массив, Строка - колонки, по которым будет выполнена группирока
	//		* Сумма - Массив, Строка - значения в этих колонках будут сгруппированы с оператором "СУММА"
	//		* Среднее - Массив, Строка - значения в этих колонках будут сгруппированы с оператором "СРЕДНЕЕ"
	//		* Максимум - Массив, Строка - значения в этих колонках будут сгруппированы с оператором "МАКСИМУМ"
	//		* Минимум - Массив, Строка - значения в этих колонках будут сгруппированы с оператором "МИНИМУМ"
	//		* Пропуск - Массив, Строка - эти колонки не будут обработаны.
	//  ТипРезультата	 - Строка - если ВременнаяТаблица, то будет возвращен МенеджерВременныхТаблиц, содержащий таблицу "ВременнаяТаблицаСвертки".
	// 		Иначе будет возвращена сама временная таблица.
	//
	// Возвращаемое значение:
	//   - ТаблицаЗначений, МенеджерВременныхТаблиц
	//
	Функция Свернуть(ТаблицаЗначений, ПараметрыСвертки, ТипРезультата = "ТаблицаЗначений") Экспорт
		
		ПолныеПараметры = ПолныеПараметры(ТаблицаЗначений, ПараметрыСвертки);	
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолныйТекстЗапроса(ПолныеПараметры, ТипРезультата);
		Запрос.УстановитьПараметр("Таблица", ТаблицаЗначений);
		Если ТипРезультата = "ВременнаяТаблица" Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если ТипРезультата = "РезультатЗапроса" Тогда
			Возврат Результат;
		ИначеЕсли ТипРезультата = "ВременнаяТаблица" Тогда
			Возврат Запрос.МенеджерВременныхТаблиц;
		Иначе
			Возврат Результат.Выгрузить();
		КонецЕсли;
		
	КонецФункции
	
	#Область Служебно
	
	Функция ПолныеПараметры(ТаблицаЗначений, ПараметрыСвертки)
		#Если Сервер И НЕ Сервер Тогда
			ТаблицаЗначений = Новый ТаблицаЗначений;		
		#КонецЕсли
		
		ПолныеПараметры = НовыйПараметрыСвертки();
		А1Э_Структуры.СкопироватьСвойства(ПараметрыСвертки, ПолныеПараметры, Истина);
		//мы вставляем копии массивов чтобу потом случайно не мутировать входные данные.
		Для Каждого Пара Из ПолныеПараметры Цикл
			ПолныеПараметры.Вставить(Пара.Ключ, А1Э_Массивы.Скопировать(А1Э_Массивы.Массив(Пара.Значение)));
		КонецЦикла;
		
		МассивИмен = Новый Массив;
		А1Э_Массивы.Добавить(МассивИмен, ПолныеПараметры.Измерения);
		А1Э_Массивы.Добавить(МассивИмен, ПолныеПараметры.Сумма);
		А1Э_Массивы.Добавить(МассивИмен, ПолныеПараметры.Среднее);
		А1Э_Массивы.Добавить(МассивИмен, ПолныеПараметры.Максимум);
		А1Э_Массивы.Добавить(МассивИмен, ПолныеПараметры.Минимум);
		А1Э_Массивы.Добавить(МассивИмен, ПолныеПараметры.Пропуск);
		
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Если МассивИмен.Найти(Колонка.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Колонка.ТипЗначения.СодержитТип(Тип("Строка")) И 
				Колонка.ТипЗначения.КвалификаторыСтроки.Длина = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ПолныеПараметры.Сумма.Добавить(Колонка.Имя);
			Иначе
				ПолныеПараметры.Измерения.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ПолныеПараметры;
		
	КонецФункции 
	
	Функция НовыйПараметрыСвертки()
		Возврат Новый Структура("Измерения,Сумма,Среднее,Максимум,Минимум,Пропуск","","","","", "");
	КонецФункции
	
	Функция ПолныйТекстЗапроса(ПолныеПараметры, ТипРезультата)
		Возврат "ВЫБРАТЬ * ПОМЕСТИТЬ ВТ ИЗ &Таблица КАК Таблица;" + Символы.ПС +
		ТекстЗапросаСвертки(ПолныеПараметры, ТипРезультата);
		
	КонецФункции
	
	Функция ТекстЗапросаСвертки(Параметры, ТипРезультата) Экспорт
		
		ТекстЗапроса = "ВЫБРАТЬ" + Символы.ПС;
		
		Для Каждого Элемент Из Параметры.Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "Таблица." + Элемент + "," + Символы.ПС;
		КонецЦикла;
		Для Каждого Элемент Из Параметры.Сумма Цикл
			ТекстЗапроса = ТекстЗапроса + "СУММА(Таблица." + Элемент + ") КАК " + Элемент + "," + Символы.ПС;
		КонецЦикла;
		Для Каждого Элемент Из Параметры.Среднее Цикл
			ТекстЗапроса = ТекстЗапроса + "СРЕДНЕЕ(Таблица." + Элемент + ") КАК " + Элемент + "," + Символы.ПС;
		КонецЦикла;
		Для Каждого Элемент Из Параметры.Максимум Цикл
			ТекстЗапроса = ТекстЗапроса + "МАКСИМУМ(Таблица." + Элемент + ") КАК " + Элемент + "," + Символы.ПС;
		КонецЦикла;
		Для Каждого Элемент Из Параметры.Минимум Цикл
			ТекстЗапроса = ТекстЗапроса + "МИНИМУМ(Таблица." + Элемент + ") КАК " + Элемент + "," + Символы.ПС;
		КонецЦикла;
		
		ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) -2);
		
		Если ТипРезультата = "ВременнаяТаблица" Тогда
			ТекстЗапроса = ТекстЗапроса + " ПОМЕСТИТЬ ВременнаяТаблицаСвертки" + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + " ИЗ ВТ КАК Таблица СГРУППИРОВАТЬ ПО ";
		Для Каждого Элемент Из Параметры.Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "Таблица."+Элемент+", ";
		КонецЦикла;
		ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) -2);	
		Возврат ТекстЗапроса;
		
	КонецФункции
	
	#КонецОбласти
	
#КонецЕсли
#КонецОбласти 

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_ТаблицыЗначений";	
КонецФункции 