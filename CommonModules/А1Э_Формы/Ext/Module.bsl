
#Область ПрограммноеСозданиеОбъектовФорм

#Область README
//Данная библиотека предназначена для эффективного создания объектов формы. Под термином "объект формы" в данном контексте рассматриваются
//РеквизитыФормы, ЭлементыФормы, КомандыФормы и КнопкиФормы. Основная цель данной библиотеки - абстрагироваться от написания кода вида
//"Создать массив реквизитов формы, добавить в него реквизит, вывести реквизиты на форму, добавить элемент, привязать элемент к реквизиту через ПутьКДанным"
//и начать писать код вида "Добавить поле формы".
//Базовый шаблон использования библиотеки выглядит следующим образом:
//		МассивОписаний = Новый Массив;
//		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, "Поле1", "Строка");
//		А1Э_Формы.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний); 
//
//В этом модуле есть различные функции с названиями "ДобавитьОписание<Чегото>". Большая часть из них имеет следующие стандартные параметры:
//		МассивОписаний  	- Массив - это контейнер, в который будет добавлено описание. Предполагается, что этот контейнер будет в дальнейшем передан
//			в функцию А1Э_Формы.ДобавитьРеквизитыИЭлементы(), которая осуществляет собственно добавление реквизитов и элементов.
//		Имя 				- Строка - это имя создаваемого реквизита/элемента. Имя должно быть уникально в пределах формы. 
//			Если создается и реквизит и элемент, то имя элемента можно переопределить с помощью ключа "ИмяЭлемента" в параметрах.
//		РодительЭлемента    - Строка,ЭлементФормы,Неопределено - это элемент формы (или его имя), которому создаваемый элемент будет подчинен. 
//			При передаче строки и отсутствии элемента с таким именем переданное значение игнорируется (создаваемый элемент подчиняется самой форме).
//		ПередЭлементом		- Строка,ЭлементФормы,Неопределено - это элемент формы (или его имя), перед которым создаваемый элемент будет вставлен.
//			При передаче строки и отсутствии элемента с таким именем переданное значение игнорируется (создаваемый элемент добавляется в конец).
//			В ОТЛИЧИЕ от типового можно указывать ПередЭлементом и не указывать РодительЭлемента (родитель определится автоматически).
//			Если ПередЭлементом не будет подчинен РодителюЭлемента, то будет вызвано исключение.
//		Параметры			- Структура,Неопределено - при создании элемента в параметры можно передать все его свойства. Также поддерживает некоторые другие параметры.
//		Действия			- Структура,Неопределено - ключами являются имена действий (ПриИзменении, ОбработкаАктивизации и т.д.). Значения - имена процедур.
#КонецОбласти

#Если Не Клиент Тогда
	
	// Выводит на форму объекты, описанные в переданном МассивеОписаний.
	//
	// Параметры:
	//  Форма						 - ФормаКлиентскогоПриложения	 - 
	//  МассивОписанийОбъектовФормы	 - Массив<А1Э_Формы.НовыйОписаниеРеквизитаЭлемента(),А1Э_Формы.НовыйОписаниеКомандыКнопки()>	 - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ДобавитьРеквизитыИЭлементы(Форма, МассивОписанийОбъектовФормы) Экспорт
		
		МассивРеквизитов = Новый Массив;
		Для Каждого ОписаниеРеквизита Из МассивОписанийОбъектовФормы Цикл
			ДобавитьРеквизитВМассивПоОписанию(Форма, МассивРеквизитов, ОписаниеРеквизита);
		КонецЦикла;
		Форма.ИзменитьРеквизиты(МассивРеквизитов);
		
		Для Каждого ОписаниеРеквизита Из МассивОписанийОбъектовФормы Цикл
			ОбработатьРеквизит(Форма, ОписаниеРеквизита);	
		КонецЦикла;
		
		Для Каждого ОписаниеКоманды Из МассивОписанийОбъектовФормы Цикл
			СоздатьКомандуПоОписанию(Форма, ОписаниеКоманды);
		КонецЦикла;
		
		Для Сч = 0 По МассивОписанийОбъектовФормы.Количество() - 1 Цикл
			ОписаниеЭлементаФормы = МассивОписанийОбъектовФормы[Сч]; 
			СоздатьЭлементПоОписанию(Форма, ОписаниеЭлементаФормы);
			СоздатьКнопкуПоОписанию(Форма, ОписаниеЭлементаФормы);
		КонецЦикла;
		
	КонецФункции
	
	// Добавляет описание, которое при выводе создаст РеквизитФормы и связанный с ним ЭлементФормы.
	//
	// Параметры:
	//  МассивОписаний	 - Массив -  
	//  Имя				 - Строка - 
	//  ОписаниеТипов	 - Строка,Тип,ОписаниеТипов	 - 
	//  ПутьКРеквизиту	 - Строка - указывается при создании колонки в таблице формы.
	//  Заголовок		 - Строка - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, Имя,	ОписаниеТипов, ПутьКРеквизиту = "", Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		
		Описание = НовыйОписаниеРеквизитаЭлемента();
		Описание.Имя = Имя;
		Описание.ОписаниеТипов = ОписаниеТипов;
		Описание.ПутьКРеквизиту = ПутьКРеквизиту;
		Описание.Заголовок = Заголовок;
		
		Описание.РодительЭлемента = РодительЭлемента;
		Описание.ПередЭлементом = ПередЭлементом;
		
		А1Э_Структуры.СкопироватьСвойства(Описание.Параметры, Параметры, Истина);
		А1Э_Структуры.СкопироватьСвойства(Описание.Действия, Действия, Истина);
		
		МассивОписаний.Добавить(Описание);
		Возврат Описание;
	КонецФункции 
	
	// Добавляет описание, которое при выводе создаст РеквизитФормы
	//
	// Параметры:
	//  МассивОписаний	 - Массив -  
	//  Имя				 - Строка - 
	//  ОписаниеТипов	 - Строка,Тип,ОписаниеТипов	 - 
	//  ПутьКРеквизиту	 - Строка - указывается при создании колонки в таблице формы.
	//  Заголовок		 - Строка - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеРеквизита(МассивОписаний, Имя, ОписаниеТипов, ПутьКРеквизиту = "", Заголовок = "", Параметры = Неопределено) Экспорт
		Описание = НовыйОписаниеРеквизитаЭлемента();
		Описание.Имя = Имя;
		Описание.ОписаниеТипов = ОписаниеТипов;
		Описание.ПутьКРеквизиту = ПутьКРеквизиту;
		Описание.Заголовок = Заголовок;
		Описание.СоздаватьЭлемент = Ложь;
		А1Э_Структуры.СкопироватьСвойства(Описание.Параметры, Параметры, Истина);
		
		МассивОписаний.Добавить(Описание);
		Возврат Описание;
	КонецФункции
	
	// Добавляет описание, которое при выводе создаст ЭлементФормы.
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы -  
	//  Имя				 - Строка - 
	//  ПутьКРеквизиту	 - Строка - указывается при создании колонки в таблице формы.
	//  Заголовок		 - Строка - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеЭлемента(МассивОписаний, ИмяРеквизита, ПутьКРеквизиту = "", Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		
		Описание = НовыйОписаниеРеквизитаЭлемента();
		Описание.СоздаватьРеквизит = Ложь;
		Описание.Имя = ИмяРеквизита;
		Описание.ПутьКРеквизиту = ПутьКРеквизиту;
		Описание.Заголовок = Заголовок;
		
		Описание.РодительЭлемента = РодительЭлемента;
		Описание.ПередЭлементом = ПередЭлементом;
		
		А1Э_Структуры.СкопироватьСвойства(Описание.Параметры, Параметры, Истина);
		А1Э_Структуры.СкопироватьСвойства(Описание.Действия, Действия, Истина);
		
		МассивОписаний.Добавить(Описание);
		Возврат Описание;
	КонецФункции
	
	// Добавляет описание, которое при выводе создаст КомандуФормы и КнопкуФормы.
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы -  
	//  Имя				 - Строка - 
	//  Действие		 - Строка - 
	//  Заголовок		 - Строка - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеКомандыКнопки() 
	//
	Функция ДобавитьОписаниеКомандыИКнопки2(МассивОписаний, Имя, Действие, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		//ТУДУ: Убрать вызов устаревшей функции, сделать наоборот.
		Возврат ДобавитьОписаниеКомандыИКнопки(МассивОписаний, Имя, Действие, А1Э_Структуры.ЗначениеСвойства(Параметры, "ЭтоГиперссылка", Ложь), Заголовок, 
		РодительЭлемента, ПередЭлементом, А1Э_Структуры.ЗначениеСвойства(Параметры, "Подсказка", ""), Параметры, Действия);
	КонецФункции
	
	// Добавляет описание, которое при выводе создаст КомандуФормы.
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы -  
	//  Имя				 - Строка - 
	//  Действие		 - Строка - 
	//  Заголовок		 - Строка -
	//	Подсказка		 - Строка - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеКомандыКнопки() 
	//
	Функция ДобавитьОписаниеКоманды(МассивОписаний, Имя, Действие = Неопределено, Заголовок = "", Подсказка = "", Параметры = Неопределено) Экспорт
		Описание = НовыйОписаниеКомандыКнопки();
		Описание.Имя = Имя;
		Если Действие = Неопределено Тогда
			Описание.Действие = Имя;
		Иначе
			Описание.Действие = Действие;
		КонецЕсли;
		Описание.Подсказка = Подсказка;
		Описание.Заголовок = Заголовок;
		Описание.СоздаватьКнопку = Ложь;
		А1Э_Структуры.СкопироватьСвойства(Описание.Параметры, Параметры, Истина);
		
		ОбработатьСочетаниеКлавиш(Описание.Параметры);	
		
		МассивОписаний.Добавить(Описание);
	КонецФункции
	
	// Добавляет описание, которое при выводе создаст КнопкуФормы
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы - 
	//  Имя				 - Строка - 
	//  ИмяКоманды		 - Строка - 
	//  ЭтоГиперссылка	 - Булево - 
	//  Заголовок		 - Строка - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 -
	//  Подсказка		 - Строка - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеКомандыКнопки() 
	//
	Функция ДобавитьОписаниеКнопки(МассивОписаний, Имя, ИмяКоманды = "", ЭтоГиперссылка = Ложь, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Подсказка = "", Параметры = Неопределено, Действия = Неопределено) Экспорт 
		Описание = НовыйОписаниеКомандыКнопки();
		Описание.Имя = Имя;
		Если ИмяКоманды = "" Тогда
			Описание.ИмяКоманды = Имя;
		Иначе 
			Описание.ИмяКоманды = ИмяКоманды;
		КонецЕсли;
		
		Описание.ЭтоГиперссылка = ЭтоГиперссылка;
		Описание.РодительЭлемента = РодительЭлемента;
		Описание.ПередЭлементом = ПередЭлементом;
		Описание.Подсказка = Подсказка;
		Описание.Заголовок = Заголовок;
		Описание.СоздаватьКоманду = Ложь;
		А1Э_Структуры.СкопироватьСвойства(Описание.Параметры, Параметры, Истина);
		А1Э_Структуры.СкопироватьСвойства(Описание.Действия, Действия, Истина);
		
		ОбработатьСочетаниеКлавиш(Описание.Параметры);	
		
		МассивОписаний.Добавить(Описание);
	КонецФункции
	
	#Область ПроцедурыСозданияОбъектовФормы
	
	Функция ДобавитьРеквизитВМассивПоОписанию(Форма, МассивРеквизитов, ОписаниеРеквизита) Экспорт
		Если А1Э_Классы.Класс(ОписаниеРеквизита) <> А1Э_Классы.ОписаниеРеквизитаЭлемента() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ ОписаниеРеквизита.СоздаватьРеквизит Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОписаниеТипов = А1Э_СтандартныеТипы.ОписаниеТиповПолучить(ОписаниеРеквизита.ОписаниеТипов);
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ОписаниеРеквизита.Имя, ОписаниеТипов, ОписаниеРеквизита.ПутьКРеквизиту, ОписаниеРеквизита.Заголовок, А1Э_Структуры.ЗначениеСвойства(ОписаниеРеквизита.Параметры, "СохраняемыеДанные", Ложь))); 
		
		Если А1Э_Структуры.ЗначениеСвойства(ОписаниеРеквизита.Параметры, "ХранитьНачальноеЗначение") = Истина Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ОписаниеРеквизита.Имя + "___НачальноеЗначение", ОписаниеТипов, ОписаниеРеквизита.ПутьКРеквизиту, ОписаниеРеквизита.Заголовок));
		КонецЕсли;
	КонецФункции
	
	Функция ОбработатьРеквизит(Форма, ОписаниеРеквизита) Экспорт
		Если А1Э_Классы.Класс(ОписаниеРеквизита) <> А1Э_Классы.ОписаниеРеквизитаЭлемента() Тогда Возврат Неопределено; КонецЕсли;
		Если НЕ ОписаниеРеквизита.СоздаватьРеквизит Тогда Возврат Неопределено;	КонецЕсли;
		
		ЗаполнитьНачальноеЗначениеРеквизита(Форма, ОписаниеРеквизита);
		УстановитьПараметрыДинамическогоСписка(Форма, ОписаниеРеквизита);
		УстановитьПараметрыСпискаЗначений(Форма, ОписаниеРеквизита);
		//Обра
	КонецФункции
	
	Функция ЗаполнитьНачальноеЗначениеРеквизита(Форма, ОписаниеРеквизита) Экспорт 
		Перем НачальноеЗначение;
		
		Если НЕ А1Э_Структуры.Свойство(ОписаниеРеквизита.Параметры, "ЗначениеРеквизита", НачальноеЗначение) Тогда Возврат Неопределено КонецЕсли;
		
		Если ОписаниеРеквизита.ПутьКРеквизиту <> "" Тогда Возврат Неопределено;	КонецЕсли;
		
		УстановитьЗначениеРеквизита(Форма, ОписаниеРеквизита.Имя, НачальноеЗначение);
		Если А1Э_Структуры.ЗначениеСвойства(ОписаниеРеквизита.Параметры, "ХранитьНачальноеЗначение") = Истина Тогда
			УстановитьЗначениеРеквизита(Форма, ИмяРеквизитаСНачальнымЗначением(ОписаниеРеквизита.Имя), НачальноеЗначение);
		КонецЕсли;
	КонецФункции
	
	Функция УстановитьПараметрыДинамическогоСписка(Форма, ОписаниеРеквизита) Экспорт
		Если ОписаниеРеквизита.ПутьКРеквизиту <> "" Тогда Возврат Неопределено;	КонецЕсли;
		Если ТипЗнч(Форма[ОписаниеРеквизита.Имя]) <> Тип("ДинамическийСписок") Тогда Возврат Неопределено КонецЕсли;
		ДинамическийСписок = Форма[ОписаниеРеквизита.Имя]; 
		
		ПараметрыДинамическогоСписка = А1Э_Иерархии.ЗначениеСвойства(ОписаниеРеквизита, "Параметры", "ПараметрыДинамическогоСписка"); 
		Если ПараметрыДинамическогоСписка = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДинамическийСписок, ПараметрыДинамическогоСписка);
		
		ПараметрыЗапроса = А1Э_Структуры.ЗначениеСвойства(ПараметрыДинамическогоСписка, "ПараметрыЗапроса");
		Если ПараметрыЗапроса = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		Для Каждого Пара Из ПараметрыЗапроса Цикл
			ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Пара.Ключ, Пара.Значение);	
		КонецЦикла;
		
	КонецФункции
	
	Функция УстановитьПараметрыСпискаЗначений(Форма, ОписаниеРеквизита) Экспорт
		Если ОписаниеРеквизита.ПутьКРеквизиту <> "" Тогда Возврат Неопределено;	КонецЕсли;
		Если ТипЗнч(Форма[ОписаниеРеквизита.Имя]) <> Тип("СписокЗначений") Тогда Возврат Неопределено КонецЕсли;
		СписокЗначений = Форма[ОписаниеРеквизита.Имя];
		
		ТипЗначенияСписка = А1Э_Иерархии.ЗначениеСвойства(ОписаниеРеквизита, "Параметры", "ТипЗначенияСписка"); 
		Если ТипЗначенияСписка <> Неопределено Тогда
			СписокЗначений.ТипЗначения = А1Э_СтандартныеТипы.ОписаниеТиповПолучить(ТипЗначенияСписка);
		КонецЕсли;
	КонецФункции
	
	Функция СоздатьЭлементПоОписанию(Форма, ОписаниеРеквизита) Экспорт
		Если А1Э_Классы.Класс(ОписаниеРеквизита) <> А1Э_Классы.ОписаниеРеквизитаЭлемента() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ ОписаниеРеквизита.СоздаватьЭлемент Тогда
			Возврат Неопределено;
		КонецЕсли;
		ИмяЭлемента = А1Э_Структуры.ЗначениеСвойства(ОписаниеРеквизита.Параметры, "ИмяЭлемента", ИмяТаблицыПоляФормы(Форма, ОписаниеРеквизита.РодительЭлемента) + ОписаниеРеквизита.Имя);
		Если Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
			А1Э_Служебный.СлужебноеИсключение("Ошибка при создании элемента " + ИмяЭлемента + ": элемент с таким именем уже существует!");
		КонецЕсли;
		//Исправляем ситуации, когда указанный родитель не соотвествует указанному положению.
		РодительЭлемента = ЭлементФормы(Форма, ОписаниеРеквизита.РодительЭлемента);
		ПередЭлементом = ЭлементФормы(Форма, ОписаниеРеквизита.ПередЭлементом);
		Если РодительЭлемента = Неопределено И ПередЭлементом <> Неопределено Тогда
			РодительЭлемента = ПередЭлементом.Родитель;
		ИначеЕсли РодительЭлемента <> Неопределено И ПередЭлементом <> Неопределено Тогда
			Если ПередЭлементом.Родитель <> РодительЭлемента Тогда
				ПередЭлементом = Неопределено;
			КонецЕсли;
		КонецЕсли;
		ЭлементФормы = Форма.Элементы.Вставить(ИмяЭлемента, ОписаниеРеквизита.Параметры.Тип, РодительЭлемента, ПередЭлементом);
		
		Если НЕ ОписаниеРеквизита.СоздаватьРеквизит Тогда
			ЭлементФормы.Заголовок = ОписаниеРеквизита.Заголовок;
		КонецЕсли;
		
		Если Тип(ЭлементФормы) = Тип("ПолеФормы") Или Тип(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			Если ОписаниеРеквизита.ПутьКРеквизиту <> "" Тогда
				ЭлементФормы.ПутьКДанным = ОписаниеРеквизита.ПутьКРеквизиту + "." + ОписаниеРеквизита.Имя;
			Иначе
				ЭлементФормы.ПутьКДанным = ОписаниеРеквизита.Имя;
			КонецЕсли;
		КонецЕсли;
		
		Если Тип(ЭлементФормы) = Тип("ПолеФормы") Тогда
			Если ЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
				ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			Попытка //Разными способами проверяем булевые реквизиты. В частности ловим ситуацию когда создается только элемент и тип реквизита не указывается.
				//ТУДУ: в отдельную процедуру.
				ЗначениеРеквизита = Реквизит(Форма, ОписаниеРеквизита.Имя, ОписаниеРеквизита.ПутьКРеквизиту);
				Если ЗначениеРеквизита = Null Тогда //Скорее всего реквизит это колонка таблицы. Проверяем значение в первой строке (создаем если отсутствует) на булево.
					Коллекция = Реквизит(Форма, ОписаниеРеквизита.ПутьКРеквизиту);
					Если ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекция") Тогда
						
						Если Коллекция.Количество() = 0 Тогда
							Строка = Коллекция.Добавить();
							ОчиститьПосле = Истина;
						Иначе
							Строка = Коллекция[0];
							ОчиститьПосле = Ложь;
						КонецЕсли;
						Если ТипЗнч(Строка[ОписаниеРеквизита.Имя]) = Тип("Булево") Тогда
							ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
						Иначе //Проверяем, можно ли присвоить булево. Булевые поля составного типа почти никогда не используются.
							Если ОписаниеРеквизита.Имя <> "НомерСтроки" Тогда //Поле "НомерСтроки" табличных частей недоступно для записи и падает в ошибку.
								ТекущееЗначение = Строка[ОписаниеРеквизита.Имя];
								Строка[ОписаниеРеквизита.Имя] = Истина;
								Если ТипЗнч(Строка[ОписаниеРеквизита.Имя]) = Тип("Булево") И Строка[ОписаниеРеквизита.Имя] = Истина Тогда
									ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
								КонецЕсли;
								Строка[ОписаниеРеквизита.Имя] = ТекущееЗначение;
							КонецЕсли;
						КонецЕсли;
						Если ОчиститьПосле Тогда Коллекция.Очистить() КонецЕсли;
					ИначеЕсли ТипЗнч(Коллекция) = Тип("ДинамическийСписок") Тогда
						//В динамическом списке можно определить тип через доступные поля отбора.
						ДоступноеПолеОтБора = Коллекция.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ОписаниеРеквизита.Имя); 
						Если ДоступноеПолеОтбора <> Неопределено Тогда
							Типы = ДоступноеПолеОтбора.ТипЗначения.Типы();
							Если Типы.Количество() = 1 И Типы[0] = Тип("Булево") Тогда
								ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				ИначеЕсли ТипЗнч(Реквизит(Форма, ОписаниеРеквизита.Имя, ОписаниеРеквизита.ПутьКРеквизиту)) = Тип("Булево")
					Или ОписаниеРеквизита.ОписаниеТипов = "Булево"
					Или ОписаниеРеквизита.ОписаниеТипов = Тип("Булево")
					Или ОписаниеРеквизита.ОписаниеТипов = Новый ОписаниеТипов("Булево")
					Тогда
					ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
				КонецЕсли;
				
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
		ЗаполнитьПараметрыЭлемента(ЭлементФормы, ОписаниеРеквизита.Параметры);
		
		Если ОписаниеРеквизита.Параметры.Свойство("СписокВыбора") Тогда
			Если А1Э_Общее.Свойство(ЭлементФормы, "СписокВыбора") Тогда
				СписокВыбора = ОписаниеРеквизита.Параметры.СписокВыбора;
				Если А1Э_Массивы.ЯвляетсяМассивом(СписокВыбора) Тогда
					ЭлементФормы.СписокВыбора.ЗагрузитьЗначения(А1Э_Массивы.Массив(СписокВыбора));
				ИначеЕсли ТипЗнч(СписокВыбора) = Тип("СписокЗначений") Тогда
					Для Каждого Элемент Из СписокВыбора Цикл
						ЭлементФормы.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка, Элемент.Картинка);
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Действие Из ОписаниеРеквизита.Действия Цикл
			Если НЕ А1Э_УниверсальнаяФорма.ЭтоСтандартноеСобытиеЭлемента(Действие.Ключ) Тогда Продолжить; КонецЕсли;
			
			ЭлементФормы.УстановитьДействие(Действие.Ключ, Действие.Значение);
		КонецЦикла;
		
		Возврат ЭлементФормы;
	КонецФункции
	
	Функция СоздатьКомандуПоОписанию(Форма, ОписаниеКоманды) Экспорт 
		Если А1Э_Классы.Класс(ОписаниеКоманды) <> А1Э_Классы.ОписаниеКомандыКнопки() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ ОписаниеКоманды.СоздаватьКоманду Тогда
			Возврат Неопределено;
		КонецЕсли;
		Команда = Форма.Команды.Добавить(ОписаниеКоманды.Имя);
		Команда.Заголовок  = ОписаниеКоманды.Заголовок;
		Команда.Подсказка  = ОписаниеКоманды.Подсказка;
		Команда.Действие   = ОписаниеКоманды.Действие;
		Команда.ИзменяетСохраняемыеДанные = А1Э_Структуры.ЗначениеСвойства(ОписаниеКоманды.Параметры, "ИзменяетСохраняемыеДанные", Ложь);
		Если ОписаниеКоманды.Параметры.Свойство("СочетаниеКлавиш") Тогда
			Команда.СочетаниеКлавиш = ОписаниеКоманды.Параметры.СочетаниеКлавиш;
		КонецЕсли;
		Возврат Команда;
	КонецФункции
	
	Функция СоздатьКнопкуПоОписанию(Форма, ОписаниеКнопки) Экспорт 
		Если А1Э_Классы.Класс(ОписаниеКнопки) <> А1Э_Классы.ОписаниеКомандыКнопки() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ ОписаниеКнопки.СоздаватьКнопку Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Кнопка = Форма.Элементы.Вставить(ОписаниеКнопки.Имя, Тип("КнопкаФормы"), РодительКнопки(Форма, ОписаниеКнопки.РодительЭлемента), ЭлементФормы(Форма, ОписаниеКнопки.ПередЭлементом));
		Если НЕ ОписаниеКнопки.СоздаватьКоманду Тогда
			Кнопка.Заголовок = ОписаниеКнопки.Заголовок;
		КонецЕсли;
		Если ОписаниеКнопки.ЭтоГиперссылка = Ложь Тогда
			Если ЭтоКнопкаКоманднойПанели(Форма, Кнопка.Родитель) Тогда
				Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Иначе
				Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			КонецЕсли;
		Иначе
			Если ЭтоКнопкаКоманднойПанели(Форма, Кнопка.Родитель) Тогда
				Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
			Иначе
				Кнопка.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
			КонецЕсли;
		КонецЕсли;
		Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Кнопка.ИмяКоманды = ОписаниеКнопки.ИмяКоманды;
		
		ЗаполнитьЗначенияСвойств(Кнопка, ОписаниеКнопки.Параметры);
		
		Возврат Кнопка;
	КонецФункции
	
	Функция ЗаполнитьПараметрыЭлемента(ЭлементФормы, Параметры)
		ИсключаемыеПараметры = Новый Массив;
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			//Заполнение группировки - сделано так, чтобы не париться с тем, используется ли ГруппировкаКолонок Или ГруппировкаПодчиненныхЭлементовФормы.
			Если Параметры.Свойство("Группировка") И А1Э_Общее.Свойство(ЭлементФормы, "Группировка") Тогда
				ГруппировкаВПараметрах = Параметры.Группировка;
				Если ТипЗнч(ГруппировкаВПараметрах) = Тип("Строка") Тогда
					ГруппировкаСтрока = ГруппировкаВПараметрах;
				Иначе
					ГруппировкаСтрока = СтрЗаменить(Строка(ГруппировкаВПараметрах), " ", "");
				КонецЕсли;
				Если ЭлементФормы.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
					ПеречислениеГруппировки = ГруппировкаКолонок;
					Если ВРЕГ(ГруппировкаСтрока) = "ГОРИЗОНТАЛЬНАЯВСЕГДА" ТОГДА
						//Группы колонок не поддерживают горизонтальную всегда, заменяем на обычную горизонтальную.
						ГруппировкаСтрока = "Горизонтальная";
					КонецЕсли;
				Иначе
					ПеречислениеГруппировки = ГруппировкаПодчиненныхЭлементовФормы;
				КонецЕсли;
				ЭлементФормы.Группировка = ПеречислениеГруппировки[ГруппировкаСтрока];
				ИсключаемыеПараметры.Добавить("Группировка");
				Если ЭлементФормы.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
					ИсключаемыеПараметры.Добавить("Вид");
				КонецЕсли;
			КонецЕсли;
			//Если вид - ОбычнаяГруппа, то это группа, создаваемая по умолчанию. Тогда Для ГруппКолонок и Подменю ничего не меняем.
			Если Параметры.Свойство("Вид") Тогда
				Если Параметры.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
					Если ЭлементФормы.Вид = ВидГруппыФормы.ГруппаКолонок Или ЭлементФормы.Вид = ВидГруппыФормы.Подменю Тогда
						ИсключаемыеПараметры.Добавить("Вид");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Исключения = СтрСоединить(ИсключаемыеПараметры, ",");
		ЗаполнитьЗначенияСвойств(ЭлементФормы, Параметры, , Исключения);
		//В случае групп их набор свойст меняется при изменении вида. ТУДУ: сделать более изящный механизм.
		ЗаполнитьЗначенияСвойств(ЭлементФормы, Параметры, , Исключения);
		
	КонецФункции
	
	#КонецОбласти 
	
	#Область Служебно
	
	Функция НовыйОписаниеРеквизитаЭлемента()
		СтруктураРеквизита = Новый Структура;
		
		СтруктураРеквизита.Вставить("Класс", А1Э_Классы.ОписаниеРеквизитаЭлемента());
		СтруктураРеквизита.Вставить("СоздаватьРеквизит", Истина);
		СтруктураРеквизита.Вставить("Имя", "");
		СтруктураРеквизита.Вставить("ОписаниеТипов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(10)));
		СтруктураРеквизита.Вставить("ПутьКРеквизиту", "");
		СтруктураРеквизита.Вставить("Заголовок", "");
		
		СтруктураРеквизита.Вставить("СоздаватьЭлемент", Истина);
		СтруктураРеквизита.Вставить("РодительЭлемента", Неопределено);
		СтруктураРеквизита.Вставить("ПередЭлементом", Неопределено);
		СтруктураРеквизита.Вставить("Параметры", НовыйПараметрыРеквизита());
		СтруктураРеквизита.Вставить("Действия", Новый Структура);
		
		Возврат СтруктураРеквизита;
		
	КонецФункции
	
	Функция НовыйПараметрыРеквизита()
		Параметры = Новый Структура;
		
		Параметры.Вставить("Тип", Тип("ПолеФормы"));
		
		Возврат Параметры;
	КонецФункции
	
	Функция НовыйОписаниеКомандыКнопки()
		Структура = Новый Структура;
		
		Структура.Вставить("Класс", А1Э_Классы.ОписаниеКомандыКнопки());
		Структура.Вставить("СоздаватьКоманду", Истина);
		Структура.Вставить("СоздаватьКнопку", Истина);
		
		Структура.Вставить("Имя", "");
		Структура.Вставить("Действие", "");
		Структура.Вставить("ИмяКоманды", "");
		Структура.Вставить("ЭтоГиперссылка", Ложь);
		Структура.Вставить("РодительЭлемента", Неопределено);
		Структура.Вставить("ПередЭлементом", Неопределено);
		Структура.Вставить("Заголовок", "");
		Структура.Вставить("Подсказка", "");
		Структура.Вставить("Параметры", Новый Структура);
		Структура.Вставить("Действия", Новый Структура);
		Возврат Структура;
	КонецФункции
	
	Функция ИмяТаблицыПоляФормы(Форма, Знач РодительЭлемента)
		РодительЭлемента = ЭлементФормы(Форма, РодительЭлемента);
		Если РодительЭлемента = Неопределено Тогда
			Возврат "";
		ИначеЕсли ТипЗнч(РодительЭлемента) = Тип("УправляемаяФорма") Тогда
			Возврат "";
		ИначеЕсли ТипЗнч(РодительЭлемента) = Тип("ТаблицаФормы") Тогда
			Возврат РодительЭлемента.Имя;
		Иначе
			Возврат ИмяТаблицыПоляФормы(Форма, РодительЭлемента.Родитель);
		КонецЕсли;	
	КонецФункции
	
	Функция ЭтоКнопкаКоманднойПанели(Форма, Знач РодительКнопки) 
		Если РодительКнопки = Неопределено Тогда
			Возврат Ложь;
		ИначеЕсли РодительКнопки = Форма.КоманднаяПанель Тогда
			Возврат Истина;
		ИначеЕсли ТипЗнч(РодительКнопки) = Тип("УправляемаяФорма") Тогда
			Возврат Ложь;
		Иначе
			РодительКнопки = ЭлементФормы(Форма, РодительКнопки);
			Возврат ЭтоКнопкаКоманднойПанели(Форма, РодительКнопки.Родитель);
		КонецЕсли;
	КонецФункции
	
	Функция ОбработатьСочетаниеКлавиш(Параметры)
		Если НЕ Параметры.Свойство("СочетаниеКлавиш") Тогда Возврат Неопределено; КонецЕсли;
		
		Если ТипЗнч(Параметры.СочетаниеКлавиш) = Тип("Строка") Тогда
			ИдентификаторКлавиши = Параметры.СочетаниеКлавиш;	
			Если А1Э_Строки.ТолькоЦифры(Лев(Параметры.СочетаниеКлавиш, 1)) Тогда
				ИдентификаторКлавиши = "_" + ИдентификаторКлавиши;
			КонецЕсли;
			Параметры.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[ИдентификаторКлавиши]);
		КонецЕсли;
	КонецФункции
	
	#КонецОбласти
	
#КонецЕсли

#Область СлужебноКлиентСервер

Функция РеквизитИзменен(Форма, ИмяРеквизита) Экспорт
	НачальноеЗначение = НачальноеЗначениеРеквизита(Форма, ИмяРеквизита);
	Если НачальноеЗначение = Null Тогда Возврат Неопределено; КонецЕсли;
	Возврат Форма[ИмяРеквизита] <> НачальноеЗначение;
КонецФункции

Функция НачальноеЗначениеРеквизита(Форма, ИмяРеквизита) Экспорт
	Возврат Реквизит(Форма, ИмяРеквизитаСНачальнымЗначением(ИмяРеквизита)); 
КонецФункции 

Функция ИмяРеквизитаСНачальнымЗначением(ИмяРеквизита) Экспорт
	Возврат ИмяРеквизита + "___НачальноеЗначение";
КонецФункции 

Функция СинхронизироватьРеквизит(Форма, ИмяРеквизита) Экспорт
	Форма[ИмяРеквизитаСНачальнымЗначением(ИмяРеквизита)] = Форма[ИмяРеквизита];
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область ОписанияСложныхОбъектов
#Если НЕ Клиент Тогда
	
	// Добавляет описание группы элементов формы.
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы	 - 
	//  Имя				 - Строка	- 
	//  Заголовок		 - Строка	- если не передан, то группа будет создана без отображения заголовка 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеГруппы(МассивОписаний, Имя, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		РабочиеПараметры = А1Э_Структуры.СкопироватьССозданием(Параметры);
		РабочиеПараметры.Вставить("Тип", Тип("ГруппаФормы"));
		
		А1Э_Структуры.ВставитьЕслиОтсутствует(РабочиеПараметры, "Вид", ВидГруппыФормы.ОбычнаяГруппа);
		Если Заголовок = "" И РабочиеПараметры.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			А1Э_Структуры.ВставитьЕслиОтсутствует(РабочиеПараметры, "Отображение", ОтображениеОбычнойГруппы.Нет);
			А1Э_Структуры.ВставитьЕслиОтсутствует(РабочиеПараметры, "ОтображатьЗаголовок", Ложь);
		КонецЕсли;
		
		Возврат ДобавитьОписаниеЭлемента(МассивОписаний, Имя, , Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
	КонецФункции
	
	// Добавляет описание группы страниц.
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы	 - 
	//  Имя				 - Строка	 - 
	//  Заголовок		 - Строка	 - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеГруппыСтраниц(МассивОписаний, Имя, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		РабочиеПараметры = А1Э_Структуры.СкопироватьССозданием(Параметры);
		РабочиеПараметры.Вставить("Тип", Тип("ГруппаФормы"));
		А1Э_Структуры.ВставитьЕслиОтсутствует(РабочиеПараметры, "Вид", ВидГруппыФормы.Страницы);
		
		Возврат ДобавитьОписаниеЭлемента(МассивОписаний, Имя, , Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
	КонецФункции
	
	// Добавляет описание страницы.
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы	 - 
	//  Имя				 - Строка	 - 
	//  Заголовок		 - Строка	 - 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеСтраницы(МассивОписаний, Имя, Заголовок = "", РодительЭлемента, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт 
		РабочиеПараметры = А1Э_Структуры.СкопироватьССозданием(Параметры);
		РабочиеПараметры.Вставить("Тип", Тип("ГруппаФормы"));
		А1Э_Структуры.ВставитьЕслиОтсутствует(РабочиеПараметры, "Вид", ВидГруппыФормы.Страница);
		
		Возврат ДобавитьОписаниеЭлемента(МассивОписаний, Имя, , Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
	КонецФункции
	
	// Добавляет описание горизонтальной группы элементов формы. Удобно чтобы не передавать параметры в ДобавитьОписаниеГруппы()
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы	 - 
	//  Имя				 - Строка	- 
	//  Заголовок		 - Строка	- если не передан, то группа будет создана без отображения заголовка 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеГоризонтальнойГруппы(МассивОписаний, Имя, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		РабочиеПараметры = А1Э_Структуры.СкопироватьВШаблон(Параметры,
		"Группировка", ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
		А1Э_Формы.ДобавитьОписаниеГруппы(МассивОписаний, Имя, Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
	КонецФункции
	
	// Добавляет описание вертикальной группы элементов формы. Удобно чтобы не передавать параметры в ДобавитьОписаниеГруппы()
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы	 - 
	//  Имя				 - Строка	- 
	//  Заголовок		 - Строка	- если не передан, то группа будет создана без отображения заголовка 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеВертикальнойГруппы(МассивОписаний, Имя, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		РабочиеПараметры = А1Э_Структуры.СкопироватьВШаблон(Параметры,
		"Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		А1Э_Формы.ДобавитьОписаниеГруппы(МассивОписаний, Имя, Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
	КонецФункции
	
	// Добавляет описание элемента, привязанного к реквизиту объекту. Если необходимо чтобы имя элемента отличалось от имени реквизита,
	// используйте  "ИмяЭлемента" в "Параметрах".
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы	 - 
	//  Имя				 - Строка	- 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеПоляОбъекта(МассивОписаний, Имя, РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт  
		Возврат А1Э_Формы.ДобавитьОписаниеЭлемента(МассивОписаний, Имя, "Объект", "", РодительЭлемента, ПередЭлементом, Параметры, Действия);
	КонецФункции
	
	// Добавляет описание таблицы, привязанной к табличной части объекта, а также колонок для реквизитов этой табличной части.
	// Возвращает описание самой таблицы.
	//
	// Параметры:
	//  МассивОписаний	 - МассивОписанийОбъектовФормы	 - 
	//  Имя				 - Строка	-
	//	Колонки			 - Строка,Массив,Неопределено - если не передано, то колонки будут созданы для всех реквизитов 
	//  Заголовок		 - Строка	- если не передан, то группа будет создана без отображения заголовка 
	//  РодительЭлемента - Строка,ЭлементФормы,Неопределено	 - 
	//  ПередЭлементом	 - Строка,ЭлементФормы,Неопределено	 - 
	//  Параметры		 - Структура,Неопределено - 
	//  Действия		 - Структура,Неопределено - 
	// 
	// Возвращаемое значение:
	//   - А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	//
	Функция ДобавитьОписаниеТаблицыОбъекта(Форма, МассивОписаний, Имя, Знач Колонки = Неопределено, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт  
		ПараметрыТаблицы = А1Э_Структуры.СкопироватьВШаблон(Параметры,
		"Тип", Тип("ТаблицаФормы"));
		ОписаниеТаблицы = ДобавитьОписаниеЭлемента(МассивОписаний, Имя, "Объект", Заголовок, РодительЭлемента, ПередЭлементом, ПараметрыТаблицы, Действия); 
		
		РабочиеКолонки = А1Э_Структуры.Скопировать(Колонки);
		Если НЕ РабочиеКолонки.Свойство("НомерСтроки") Тогда
			РабочиеКолонки.Вставить("НомерСтроки", А1Э_Структуры.Создать(
			"Ширина", 3,
			"РастягиватьПоГоризонтали", Ложь,
			));
		КонецЕсли;
		МетаданныеОбъекта = Форма.Объект.Ссылка.Метаданные();
		МетаданныеТаблицы = МетаданныеОбъекта.ТабличныеЧасти[Имя];
		Контекст = А1Э_Структуры.Создать(
		"ТолькоУказанныеКолонки", А1Э_Структуры.ЗначениеСвойства(Параметры, "ТолькоУказанныеКолонки", Ложь),
		"Колонки", А1Э_Структуры.Структура(Колонки),
		);
		
		ДобавитьОписаниеКолонкиТаблицыОбъекта(МассивОписаний, "НомерСтроки", Имя, Имя); 
		
		Для Каждого Реквизит Из МетаданныеТаблицы.Реквизиты Цикл
			//Такие колонки вызывают исключение, игнорируем их.
			Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда Продолжить; КонецЕсли;

			КонтекстКолонки = А1Э_Структуры.ЗначениеСвойства(Контекст.Колонки, Реквизит.Имя);
			Если КонтекстКолонки = Неопределено И Контекст.ТолькоУказанныеКолонки = Истина Тогда Продолжить; КонецЕсли;
			Если А1Э_Структуры.Свойство(КонтекстКолонки, "НеСоздавать") Тогда Продолжить; КонецЕсли;
			
			ДобавитьОписаниеКолонкиТаблицыОбъекта(МассивОписаний, Реквизит.Имя, Имя, Имя, , КонтекстКолонки, А1Э_Структуры.ЗначениеСвойства(КонтекстКолонки, "Действия")); 
		КонецЦикла;
		
		Возврат ОписаниеТаблицы;
	КонецФункции
	
	Функция ДобавитьОписаниеКолонкиТаблицыОбъекта(МассивОписаний, Имя, ИмяТаблицы, РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт 
		ДобавитьОписаниеЭлемента(МассивОписаний, Имя, "Объект." + ИмяТаблицы, А1Э_Структуры.ЗначениеСвойства(Параметры, "Заголовок"), РодительЭлемента, ПередЭлементом, Параметры, Действия);
	КонецФункции
	
	Функция ДобавитьОписаниеДекорации(МассивОписаний, Имя, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		РабочиеПараметры = А1Э_Структуры.СкопироватьССозданием(Параметры);
		РабочиеПараметры.Вставить("Тип", Тип("ДекорацияФормы"));
		
		Возврат ДобавитьОписаниеЭлемента(МассивОписаний, Имя, , Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
	КонецФункции
	
	// Добавляет описание таблицы формы
	//
	// Параметры:
	//  МассивОписаний	 - Массив - 
	//  Имя				 - Строка - Имя создаваемого реквизита/элемента 
	//  Колонки			 - Строка, МассивСтруктур - структура может иметь ключи Имя, Тип, Заголовок, Параметры, Действия. Строка разделяется на массив запятыми, каждый элемент формируется как "<Имя>:<Тип>". 
	//  Заголовок		 - Строка - 
	//  РодительЭлемента - Строка, ЭлементФормы	 - 
	//  ПередЭлементом	 - Строка, ЭлементФормы	 - 
	//  Параметры		 - Структура - 
	//  Действия		 - Структура - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ДобавитьОписаниеТаблицыФормы(МассивОписаний, Имя, Знач Колонки, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		Колонки = А1Э_Массивы.Массив(Колонки);
		РабочиеПараметры = А1Э_Структуры.СкопироватьВШаблон(Параметры,
		"Тип", Тип("ТаблицаФормы"));
		
		ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, Имя, "ТаблицаЗначений", , Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
		Для Каждого Колонка Из Колонки Цикл
			ДанныеКолонки = ДанныеКолонкиТаблицыФормы(Колонка);
			ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, ДанныеКолонки.Имя, ДанныеКолонки.Тип, Имя, ДанныеКолонки.Заголовок, Имя, , ДанныеКолонки.Параметры, ДанныеКолонки.Действия); 
		КонецЦикла;
	КонецФункции
	
	Функция ДобавитьОписаниеДереваФормы(МассивОписаний, Имя, Знач Колонки, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		Колонки = А1Э_Массивы.Массив(Колонки);
		РабочиеПараметры = А1Э_Структуры.Скопировать(Параметры);
		РабочиеПараметры.Вставить("Тип", Тип("ТаблицаФормы"));
		
		ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, Имя, "ДеревоЗначений", , Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
		Для Каждого Колонка Из Колонки Цикл
			ДанныеКолонки = ДанныеКолонкиТаблицыФормы(Колонка);
			ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, ДанныеКолонки.Имя, ДанныеКолонки.Тип, Имя, ДанныеКолонки.Заголовок, Имя, , ДанныеКолонки.Параметры, ДанныеКолонки.Действия); 
		КонецЦикла;
	КонецФункции
	
	// Добавляет описание динамического списка
	//
	// Параметры:
	//  МассивОписаний	 - Массив - массив, в который 
	//  Имя				 - Строка	 - 
	//  ПараметрыСписка	 - Структура - ключи:
	//		ТекстЗапроса(Строка), 
	//		ПараметрыЗапроса(Структура), 
	//		ДинамическоеСчитываниеДанных(Булево),
	//		Колонки(Массив Строк или Структур)
	//  Заголовок		 - Строка	 - 
	//  РодительЭлемента - Строка, ЭлементФормы	 - 
	//  ПередЭлементом	 - Строка, ЭлементФормы	 - 
	//  Параметры		 - Структура - 
	//  Действия		 - Структура - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ДобавитьОписаниеДинамическогоСписка(МассивОписаний, Имя, ПараметрыСписка, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		Если ПараметрыСписка = Неопределено Тогда Возврат Неопределено КонецЕсли;
		РабочиеПараметрыСписка = А1Э_Структуры.Скопировать(ПараметрыСписка);
		А1Э_Структуры.ВставитьЕслиОтсутствует(ПараметрыСписка, "ДинамическоеСчитываниеДанных", Ложь);
		
		РабочиеПараметры = А1Э_Структуры.Скопировать(Параметры);
		РабочиеПараметры.Вставить("Тип", Тип("ТаблицаФормы"));
		РабочиеПараметры.Вставить("ПараметрыДинамическогоСписка", ПараметрыСписка);
		
		ОписаниеСписка = А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, Имя, "ДинамическийСписок", , Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
		
		Колонки = А1Э_Массивы.Массив(А1Э_Структуры.ЗначениеСвойства(ПараметрыСписка, "Колонки"));
		Если Колонки = Неопределено Тогда Возврат Неопределено КонецЕсли;
		
		Для Каждого Колонка Из Колонки Цикл
			Если ТипЗнч(Колонка) = Тип("Строка") Тогда
				ДанныеКолонки = Новый Структура("Имя", Колонка);
			Иначе
				ДанныеКолонки = Колонка;
			КонецЕсли;
			А1Э_Формы.ДобавитьОписаниеЭлемента(МассивОписаний, ДанныеКолонки.Имя, Имя, А1Э_Структуры.ЗначениеСвойства(ДанныеКолонки, "Заголовок"), Имя, ,
			А1Э_Структуры.ЗначениеСвойства(ДанныеКолонки, "Параметры"),
			А1Э_Структуры.ЗначениеСвойства(ДанныеКолонки, "Действия"));
		КонецЦикла;
		
		Возврат ОписаниеСписка
	КонецФункции
	
	Функция ДобавитьОписаниеГиперссылки(МассивОписаний, Имя, ОписаниеТипов, ПутьКРеквизиту = "", Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт 
		РабочиеПараметры = А1Э_Структуры.СкопироватьВШаблон(Параметры,
		"Вид", ВидПоляФормы.ПолеНадписи,
		"Гиперссылка", Истина,
		);
		ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, Имя, ОписаниеТипов, ПутьКРеквизиту, Заголовок, РодительЭлемента, ПередЭлементом, РабочиеПараметры, Действия);
	КонецФункции 
	
	Функция ДобавитьОписаниеФорматированногоДокумента(МассивОписаний, Имя, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт  
		РабочиеПараметры = А1Э_Структуры.СкопироватьССозданием(Параметры);
		РабочиеПараметры.Вставить("Вид", ВидПоляФормы.ПолеФорматированногоДокумента);
		
		Возврат ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, Имя, "ФорматированныйДокумент", , Заголовок, РодительЭлемента, ПередЭлементом, Параметры, Действия); 
	КонецФункции
	
#КонецЕсли
#КонецОбласти

#Область ШапкаСКолонками

Функция РодительЭлементаШапки(Форма, Знач Родитель = Неопределено) Экспорт
	Если Родитель = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	Родитель = А1Э_Формы.ЭлементФормы(Форма, Родитель);
	ПодчиненныеГруппы = Новый Массив;
	Для Каждого Элемент Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		ПодчиненныеГруппы.Добавить(Элемент);
	КонецЦикла;
	Если ПодчиненныеГруппы.Количество() = 0 Тогда
		Возврат Родитель;
	ИначеЕсли ПодчиненныеГруппы.Количество() = 1 Тогда
		Возврат ПодчиненныеГруппы[0];
	КонецЕсли;
	СамаяСвободнаяГруппа = ПодчиненныеГруппы[0];
	Для Каждого Элемент Из ПодчиненныеГруппы Цикл
		Если Элемент.ПодчиненныеЭлементы.Количество() < СамаяСвободнаяГруппа.ПодчиненныеЭлементы.Количество() Тогда
			СамаяСвободнаяГруппа = Элемент;
		КонецЕсли;
	КонецЦикла;
	Возврат СамаяСвободнаяГруппа;
КонецФункции 

#Если НЕ Клиент Тогда
	
	Функция ДобавитьОписаниеШапкиСКолонками(МассивОписаний, Имя = "ГруппаШапка", КоличествоКолонок = 3, РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено) Экспорт
		Заголовок = А1Э_Структуры.ЗначениеСвойства(Параметры, "Заголовок");
		ДобавитьОписаниеГоризонтальнойГруппы(МассивОписаний, Имя, Заголовок, РодительЭлемента, ПередЭлементом, Параметры);
		Для Сч = 1 По КоличествоКолонок Цикл
			ДобавитьОписаниеВертикальнойГруппы(МассивОписаний, Имя + "_" + А1Э_Строки.ВСтроку(Сч), , Имя);
		КонецЦикла;
	КонецФункции 
	
	Функция ДобавитьОписаниеШапкиСДвумяКолонками(МассивОписаний, Имя = "ГруппаШапка", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		А1Э_Формы.ДобавитьОписаниеГоризонтальнойГруппы(МассивОписаний, Имя, , РодительЭлемента, ПередЭлементом, Параметры, Действия);
		А1Э_Формы.ДобавитьОписаниеВертикальнойГруппы(МассивОписаний, Имя + "Лево", , Имя);
		А1Э_Формы.ДобавитьОписаниеВертикальнойГруппы(МассивОписаний, Имя + "Право", , Имя);
	КонецФункции 
	
	Функция ДобавитьОписаниеШапкиСЗаголовкомИДвумяКолонками(МассивОписаний, Имя, Заголовок, РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт
		А1Э_Формы.ДобавитьОписаниеГоризонтальнойГруппы(МассивОписаний, Имя, Заголовок, РодительЭлемента, ПередЭлементом, Параметры, Действия);
		А1Э_Формы.ДобавитьОписаниеВертикальнойГруппы(МассивОписаний, Имя + "Лево", , Имя);
		А1Э_Формы.ДобавитьОписаниеВертикальнойГруппы(МассивОписаний, Имя + "Право", , Имя);
	КонецФункции 
#КонецЕсли
#КонецОбласти

#Область ВыводТаблицыЗначенийНаФорму
#Если Не Клиент Тогда
	
	Функция ВывестиТаблицуЗначений(Форма, ТаблицаЗначений, ИмяРеквизита, ТаблицаФормы = Неопределено) Экспорт
		
		Если ТаблицаФормы = Неопределено Тогда
			ТаблицаФормы = Форма.Элементы[ИмяРеквизита];
		КонецЕсли;
		
		УдалитьДочерниеРеквизитыИЭлементы(Форма, ИмяРеквизита, ТаблицаФормы);
		
		Для Каждого Элемент Из Форма.Элементы Цикл
			Если Элемент.Родитель = ТаблицаФормы Тогда
				Если ТипЗнч(Элемент) <> Тип("ПолеФормы") Тогда
					Продолжить;
				КонецЕсли;
				Форма.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		МассивРеквизитов = Новый Массив;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ОписаниеТипов = ОписаниеТиповДляРеквизитаФормы(Колонка);
			Если ОписаниеТипов = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьОписаниеРеквизитаИЭлемента(МассивРеквизитов, Колонка.Имя, ОписаниеТипов, ИмяРеквизита, Колонка.Имя,ТаблицаФормы,, Новый Структура("ВыбиратьТип",Ложь),);
		КонецЦикла;
		ДобавитьРеквизитыИЭлементы(Форма, МассивРеквизитов);
		Форма[ИмяРеквизита].Загрузить(ТаблицаЗначений);
	КонецФункции 
	
	Функция ОписаниеТиповДляРеквизитаФормы(Колонка);
		#Если Сервер И НЕ Сервер Тогда
			ТаблицаЗначений = Новый ТаблицаЗначений;
			Колонка = ТаблицаЗначений.Колонки.Добавить("А");		
		#КонецЕсли 
		ОписаниеТипов = Колонка.ТипЗначения;
		Если ОписаниеТипов.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если ОписаниеТипов.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если ОписаниеТипов.СодержитТип(Тип("Null")) Тогда
			ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ,"Null");
		КонецЕсли;		
		Возврат ОписаниеТипов;	
	КонецФункции 
	
#КонецЕсли
#КонецОбласти

#Область Общее

Функция УдалитьДочерниеРеквизитыИЭлементы(Форма, ИмяРодителя, ТаблицаФормы = Null) Экспорт
	Если ТаблицаФормы = Null Тогда
		ТаблицаФормы = Форма.Элементы[ИмяРодителя];
	КонецЕсли;
	
	МассивРеквизитов = Форма.ПолучитьРеквизиты(ИмяРодителя);
	Если МассивРеквизитов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УдалитьРеквизиты(Форма, МассивРеквизитов);
	
	МассивЭлементов = Новый Массив;
	Для Каждого Элемент Из Форма.Элементы Цикл
		Если Элемент.Родитель = ТаблицаФормы Тогда
			Если ТипЗнч(Элемент) <> Тип("ПолеФормы") Тогда
				Продолжить;
			КонецЕсли;
			МассивЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивЭлементов Цикл
		Форма.Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецФункции

Функция УдалитьРеквизиты(Форма, МассивРеквизитов) Экспорт
	МассивПутейКУдалению = Новый Массив;
	Для Каждого Элемент Из МассивРеквизитов Цикл
		МассивПутейКУдалению.Добавить(Элемент.Путь + "." + Элемент.Имя);
	КонецЦикла;
	Форма.ИзменитьРеквизиты(,МассивПутейКУдалению);
КонецФункции

Функция УдалитьПодчиненныеЭлементы(Форма, Знач ИдентификаторВладельца, УдалятьКоманды = Ложь) Экспорт
	Элемент = ЭлементФормы(Форма, ИдентификаторВладельца); 
	Сч = -1;
	Пока Сч < Элемент.ПодчиненныеЭлементы.Количество() - 1 Цикл
		Сч = Сч + 1;
		ПодчиненныйЭлемент = Элемент.ПодчиненныеЭлементы[Сч];
		УдалитьПодчиненныеЭлементыРекурсивно(Форма, ПодчиненныйЭлемент, УдалятьКоманды);
		Сч = Сч - 1;
	КонецЦикла;	
КонецФункции

Функция УдалитьПодчиненныеЭлементыРекурсивно(Форма, Элемент, УдалятьКоманды) 
	ПодчиненныеЭлементы = А1Э_Общее.ЗначениеСвойства(Элемент, "ПодчиненныеЭлементы");
	Если ПодчиненныеЭлементы = Неопределено Тогда
		УдалитьЭлемент(Форма, Элемент, УдалятьКоманды);
		Возврат Неопределено;
	КонецЕсли;
	Сч = -1;
	Пока Сч < ПодчиненныеЭлементы.Количество() - 1 Цикл
		Сч = Сч + 1;
		ПодчиненныйЭлемент = ПодчиненныеЭлементы[Сч];
		УдалитьПодчиненныеЭлементыРекурсивно(Форма, ПодчиненныйЭлемент, УдалятьКоманды);
		Сч = Сч - 1;
	КонецЦикла;	
	УдалитьЭлемент(Форма, Элемент, УдалятьКоманды);
КонецФункции 

Функция УдалитьЭлемент(Форма, Элемент, УдалитьКоманду = Ложь) Экспорт 
	Если ТипЗнч(Элемент) = Тип("КнопкаФормы") И УдалитьКоманду Тогда
		Форма.Команды.Удалить(Форма.Команды[Элемент.ИмяКоманды]);
	КонецЕсли;
	Форма.Элементы.Удалить(Элемент);
КонецФункции

Функция ТипФормы(Форма) Экспорт
	//Позволяет переопределить тип формы в случае, если по умолчанию он определяется неверно.
	ТипФормы = Неопределено;
	А1Э_Механизмы.ВыполнитьМеханизмыОбработчикаОбъекта("А1Э_ПриОпределенииТипаФормы", Форма, ТипФормы);
	Если ТипФормы <> Неопределено Тогда Возврат ТипФормы; КонецЕсли;
	
	МассивЧастейИмени = А1Э_Строки.Разделить(Форма.ИмяФормы, ".");
	ПоследнееИмя = А1Э_Массивы.ЭлементСКонца(МассивЧастейИмени);
	Если ТипЗнч(Реквизит(Форма, "Объект")) = Тип("ДанныеФормыСтруктура") Тогда
		Если А1Э_Общее.ЗначениеСвойства(Форма.Объект, "ЭтоГруппа") = Истина Тогда
			Возврат "ФормаГруппы";
		КонецЕсли;
		Возврат "ФормаЭлемента";
	ИначеЕсли ПоследнееИмя = "ФормаСписка" Тогда
		Возврат "ФормаСписка";		
	ИначеЕсли ТипЗнч(Реквизит(Форма, "Список")) = Тип("ДинамическийСписок") Тогда
		Если ПоследнееИмя = "ФормаВыбора" Тогда
			Возврат "ФормаВыбора";
		ИначеЕсли ПоследнееИмя = "ФормаВыбораГруппы" Тогда
			Возврат "ФормаВыбораГруппы";
		Иначе
			Возврат "ФормаСписка";
		КонецЕсли;
	Иначе
		Возврат "ПроизвольнаяФорма";
	КонецЕсли;
КонецФункции

// Для формы прикладного объекта возвращает метаданные прикладного объекта.
// Для общей формы возвращает метаданные общей формы.
//
// Параметры:
//  Форма	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция МетаданныеВладельцаФормы(Форма) Экспорт
	ИмяФормы = Форма.ИмяФормы;
	ВтораяТочка = СтрНайти(ИмяФормы, ".", , , 2);
	ИмяМетаданных = ?(ВтораяТочка = 0, ИмяФормы, Лев(ИмяФормы, ВтораяТочка - 1));
	Возврат А1Э_Метаданные.ОбъектМетаданных(ИмяМетаданных);
КонецФункции

Функция ОбъектИлиТаблицаФормы(Форма) Экспорт
	ТипФормы = ТипФормы(Форма);
	Если ТипФормы = "ФормаЭлемента" Тогда
		ОбъектИлиТаблицаФормы = Форма.Объект;
	ИначеЕсли ТипФормы = "ФормаСписка" Тогда
		Список = Форма.Элементы.Найти("Список");
		Если Список = Неопределено Тогда
			А1Э_Служебный.СлужебноеИсключение("Не удалось найти элемент <Список> на форме списка!");
		КонецЕсли;
		ОбъектИлиТаблицаФормы = Список;
	КонецЕсли;
	Возврат ОбъектИлиТаблицаФормы;
КонецФункции

Функция ТаблицаЭлемента(Форма, Знач Элемент) Экспорт
	Элемент = ЭлементФормы(Форма, Элемент);
	Если ТипЗнч(Элемент.Родитель) = Тип("ТаблицаФормы") Тогда Возврат Элемент.Родитель; 
	ИначеЕсли ТипЗнч(Элемент.Родитель) = А1Э_СтандартныеТипы.ФормаКлиентскогоПриложения() Тогда Возврат Неопределено;
	Иначе Возврат ТаблицаЭлемента(Форма, Элемент.Родитель);	
	КонецЕсли;
КонецФункции

Функция КолонкиТаблицы(Форма, Знач Элемент) Экспорт  
	Таблица = ЭлементФормы(Форма, Элемент);
	Результат = Новый Массив;
	Для Каждого ПодчиненныйЭлемент Из Таблица.ПодчиненныеЭлементы Цикл
		ДобавитьКолонкиВМассивРекурсивно(Результат, ПодчиненныйЭлемент);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ДобавитьКолонкиВМассивРекурсивно(МассивКолонок, Элемент) Экспорт
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		МассивКолонок.Добавить(Элемент);
	Иначе
		//Группы обходим в цикле рекурсивно.
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			ДобавитьКолонкиВМассивРекурсивно(ПодчиненныйЭлемент, МассивКолонок);		
		КонецЦикла;
	КонецЕсли;
КонецФункции 

Функция КонтейнерДанных(Форма, Знач Элемент) Экспорт 
	ТаблицаЭлемента = ТаблицаЭлемента(Форма, Элемент);
	Возврат ?(ТаблицаЭлемента = Неопределено, Форма, ТаблицаЭлемента.ТекущиеДанные);
КонецФункции

Функция Реквизит(Форма, Знач ИмяРеквизита, Знач ПутьКРеквизиту = "") Экспорт
	ПоследняяТочка = СтрНайти(ИмяРеквизита, ".", НаправлениеПоиска.СКонца);
	Если ПоследняяТочка > 0 Тогда
		Если ПутьКРеквизиту = "" Тогда
			ПутьКРеквизиту = Лев(ИмяРеквизита, ПоследняяТочка - 1);
		Иначе
			ПутьКРеквизиту = ПутьКРеквизиту + "." + Лев(ИмяРеквизита, ПоследняяТочка - 1); 
		КонецЕсли;
		ИмяРеквизита = Сред(ИмяРеквизита, ПоследняяТочка + 1);
	КонецЕсли;
	
	Если ПутьКРеквизиту <> "" Тогда
		Разделитель = СтрНайти(ПутьКРеквизиту, ".");
		Если Разделитель = 0 Тогда
			ИмяШага = ПутьКРеквизиту;
			ОстатокПути = "";
		Иначе
			ИмяШага = Лев(ПутьКРеквизиту, Разделитель - 1);
			ОстатокПути = Сред(ПутьКРеквизиту, Разделитель + 1);
		КонецЕсли;
		#Если НЕ Клиент Тогда
			//Исправление ошибки при попытке получения текущих данных на сервере
			Если ТипЗнч(Форма) = Тип("ТаблицаФормы") И ИмяШага = "ТекущиеДанные" Тогда
				Возврат Null;
			КонецЕсли;
		#КонецЕсли
		//Исправление исключения при попытке обращения к колонке таблицы при движении по пути к реквизиту.
		Если ТипЗнч(Форма) = Тип("ДанныеФормыКоллекция") Тогда
			Возврат Null;
		КонецЕсли;
		
		Возврат Реквизит(Форма[ИмяШага], ИмяРеквизита, ОстатокПути);
	Иначе		
		Возврат А1Э_Общее.ЗначениеСвойства(Форма, ИмяРеквизита, Null);
	КонецЕсли;
КонецФункции

Функция ЕстьРеквизит(Форма, ИмяРеквизита, ПутьКРеквизиту = "") Экспорт
	Возврат Реквизит(Форма, ИмяРеквизита, ПутьКРеквизиту) <> Null;
КонецФункции

Функция СоздатьРеквизит(Форма, Имя, Знач ОписаниеТипов, ПутьКРеквизиту = Неопределено, Заголовок = Неопределено)
	ОписаниеТипов = А1Э_СтандартныеТипы.ОписаниеТиповПолучить(ОписаниеТипов);
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(Имя, ОписаниеТипов, ПутьКРеквизиту, Заголовок));
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
КонецФункции

Функция УстановитьЗначениеРеквизита(Форма, ИмяРеквизита, Значение) Экспорт
	Если ТипЗнч(Форма[ИмяРеквизита]) = Тип("ФорматированныйДокумент") Тогда
		А1Э_ФорматированныйДокумент.УстановитьНТМЛ(Форма[ИмяРеквизита], Значение);
	Иначе
		Форма[ИмяРеквизита] = Значение;
	КонецЕсли;
КонецФункции 

Функция ЭлементФормы(Форма, Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Если Идентификатор = "Форма.КоманднаяПанель" Тогда Возврат Форма.КоманднаяПанель; КонецЕсли;
		Возврат Форма.Элементы.Найти(Идентификатор);
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
КонецФункции

Функция КомандаФормы(Форма, Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Форма.Команды.Найти(Идентификатор);
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
КонецФункции

Функция РодительКнопки(Форма, Идентификатор)
	ЭлементФормы = ЭлементФормы(Форма, Идентификатор);
	Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
		Возврат ЭлементФормы.КоманднаяПанель;
	Иначе
		Возврат ЭлементФормы;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыВыбора(ИмяИлиМассивПараметров, Значение = Неопределено) Экспорт
	Если ТипЗнч(ИмяИлиМассивПараметров) = Тип("Массив") Тогда
		Возврат Новый ФиксированныйМассив(ИмяИлиМассивПараметров);
	КонецЕсли;
	//ЗначениеПараметра = Новый ФиксированныйМассив(А1Э_Массивы.Массив(Значение));
	ЗначениеПараметра = Значение;
	ПараметрВыбора = Новый ПараметрВыбора(ИмяИлиМассивПараметров, ЗначениеПараметра);
	Возврат Новый ФиксированныйМассив(А1Э_Массивы.Создать(ПараметрВыбора));
КонецФункции

Функция ИмяЭлемента(Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Идентификатор;
	Иначе
		Возврат Идентификатор.Имя;
	КонецЕсли;
КонецФункции

Функция ИмяКоманды(ИдентификаторКоманды) Экспорт
	Если ТипЗнч(ИдентификаторКоманды) = Тип("Строка") Тогда
		Возврат ИдентификаторКоманды;
	ИначеЕсли ТипЗнч(ИдентификаторКоманды) = Тип("КомандаФормы") Тогда
		Возврат ИдентификаторКоманды.Имя;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("ИдентификаторКоманды", "А1Э_Формы.ИмяКоманды", ИдентификаторКоманды, "Строка,КомандаФормы");
	КонецЕсли;		
КонецФункции

Функция НовыйСвязиПараметровВыбора(К1 = Null, З1 = Null, К2 = Null, З2 = Null, К3 = Null, З3 = Null, К4 = Null, З4 = Null, К5 = Null, З5 = Null, К6 = Null, З6 = Null, К7 = Null, З7 = Null, К8 = Null, З8 = Null, К9 = Null, З9 = Null, К10 = Null, З10 = Null) Экспорт
	Соответствие = А1Э_Структуры.СоздатьСоответствие(К1, З1, К2, З2, К3, З3, К4, З4, К5, З5, К6, З6, К7, З7, К8, З8, К9, З9, К10, З10);
	Массив = Новый Массив;
	Для Каждого Пара Из Соответствие Цикл
		Массив.Добавить(Новый СвязьПараметраВыбора(Пара.Ключ, Пара.Значение));
	КонецЦикла;
	Возврат Новый ФиксированныйМассив(Массив);
КонецФункции

Функция НовыйПараметрыВыбора(К1 = Null, З1 = Null, К2 = Null, З2 = Null, К3 = Null, З3 = Null, К4 = Null, З4 = Null, К5 = Null, З5 = Null, К6 = Null, З6 = Null, К7 = Null, З7 = Null, К8 = Null, З8 = Null, К9 = Null, З9 = Null, К10 = Null, З10 = Null) Экспорт
	Соответствие = А1Э_Структуры.СоздатьСоответствие(К1, З1, К2, З2, К3, З3, К4, З4, К5, З5, К6, З6, К7, З7, К8, З8, К9, З9, К10, З10);
	Массив = Новый Массив;
	Для Каждого Пара Из Соответствие Цикл
		Массив.Добавить(Новый ПараметрВыбора(Пара.Ключ, Пара.Значение));
	КонецЦикла;
	Возврат Новый ФиксированныйМассив(Массив);
КонецФункции

Функция НовыйДанныеКолонкиТаблицыФормы(Имя, Тип = Неопределено, Заголовок = Неопределено, Параметры = Неопределено, Действия = Неопределено) Экспорт 
	Возврат А1Э_Структуры.Создать(
	"Имя", Имя,
	"Тип", Тип,
	"Заголовок", Заголовок,
	"Параметры", Параметры,
	"Действия", Действия,
	);
КонецФункции

Функция ВключитьСохранениеВНастройках(Форма) Экспорт
	Форма.СохранениеДанныхВНастройках = СохранениеДанныхФормыВНастройках.ИспользоватьСписок;
	Форма.АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.Использовать;
КонецФункции

// Определяет, является ли переданное значение управляемой формой.
//
// Параметры:
//  Значение - Произвольный - 
// 
// Возвращаемое значение:
//   - Булево 
//
Функция ЯвляетсяФормой(Значение) Экспорт
	Возврат ТипЗнч(Значение) = А1Э_СтандартныеТипы.ФормаКлиентскогоПриложения();
КонецФункции

// Возвращает ссылку по переданному значению, с ней связанному.
//
// Параметры:
//  ФормаИлиОбъект	 - ФормаКлиентскогоПриложения,ДанныеФормыСтруктура,ПроизвольныйОбъект	 - 
// 
// Возвращаемое значение:
//   - ПроизвольнаяСсылка
//
Функция Ссылка(ФормаИлиОбъект) Экспорт
	Если ЯвляетсяФормой(ФормаИлиОбъект) Тогда
		Возврат ФормаИлиОбъект.Объект.Ссылка;
	КонецЕсли;
	Возврат ФормаИлиОбъект.Ссылка;
КонецФункции

// Иерархически проверяет, активно ли свойство ТолькоПросмотр для текущего элемента (аналогично работе платформы)
// Работает для кнопок (проверяет по иерархии родителя).
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - 
//  Элемент	 - Строка,ЭлементФормы,КнопкаФормы - 
// 
// Возвращаемое значение:
//   - 
//
Функция ТолькоПросмотрАктивен(Форма, Знач Элемент) Экспорт
	Элемент = ЭлементФормы(Форма, Элемент); 
	ТипФорма = А1Э_СтандартныеТипы.ФормаКлиентскогоПриложения();
	Пока Истина Цикл
		Если НЕ А1Э_Общее.Свойство(Элемент, "ТолькоПросмотр") Тогда
			Элемент = Элемент.Родитель;
			Продолжить;
		КонецЕсли;
		Если Элемент.ТолькоПросмотр Тогда Возврат Истина; КонецЕсли;
		Если ТипЗнч(Элемент) = ТипФорма Тогда
			Возврат Ложь; //Истина возвращается строкой выше.
		КонецЕсли;
		Элемент = Элемент.Родитель;
	КонецЦикла;
	
КонецФункции

// Возвращает реальную (видимую пользователю) командную панель формы. Предназначена для использования в универсальных механизмах, которые в эту панель что-то добавляют.
// 
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - 
// 
// Возвращаемое значение:
//   - ГруппаФормы, Неопределено
//
Функция КоманднаяПанель(Форма) Экспорт
	КоманднаяПанель = Неопределено;
	А1Э_Механизмы.ВыполнитьМеханизмыОбработчикаОбъекта("А1Э_ПриПолученииКоманднойПанелиФормы", Форма, КоманднаяПанель);
	Если КоманднаяПанель <> Неопределено Тогда Возврат КоманднаяПанель; КонецЕсли;
	Если Форма.ПоложениеКоманднойПанели <> ПоложениеКоманднойПанелиФормы.Нет Тогда Возврат Форма.КоманднаяПанель; КонецЕсли;
	Если ТипФормы(Форма) = "ФормаСписка" Тогда
		Если Форма.Элементы.Найти("Список") <> Неопределено Тогда
			Список = Форма.Элементы.Список;
			Если ТипЗнч(Список) = Тип("ТаблицаФормы") И Список.ПоложениеКоманднойПанели <> ПоложениеКоманднойПанелиЭлементаФормы.Нет Тогда
				Возврат Список.КоманднаяПанель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;				
КонецФункции

// Возвращает элемент основного динамического списка. Предназначена для использования в универсальных механизмах.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - 
// 
// Возвращаемое значение:
//   - ЭлементФормы, Неопределено
//
Функция ОсновнойСписок(Форма) Экспорт
	ОсновнойСписок = Неопределено;
	А1Э_Механизмы.ВыполнитьМеханизмыОбработчикаОбъекта("А1Э_ПриПолученииОсновногоСписка", Форма, ОсновнойСписок);
	Если ОсновнойСписок <> Неопределено Тогда Возврат ОсновнойСписок; КонецЕсли;
	Если ТипФормы(Форма) = "ФормаСписка" Тогда
		Если Форма.Элементы.Найти("Список") <> Неопределено Тогда
			ОсновнойСписок = Форма.Элементы.Список;
		КонецЕсли;
	КонецЕсли;
	Возврат ОсновнойСписок;
КонецФункции

// Возвращает основной объект, хранящий данные формы (по умолчанию Форма.Объект). Предназначена для использования в универсальных механизмах.
//
// Параметры:
//  Форма	 - ФормаКлиенсткогоПриложения - 
// 
// Возвращаемое значение:
//   - ДанныеФормыСтруктура,Неопределено
//
Функция ОсновнойОбъект(Форма) Экспорт
	ОсновнойОбъект = Неопределено;
	А1Э_Механизмы.ВыполнитьМеханизмыОбработчикаОбъекта("А1Э_ПриПолученииОсновногоОбъекта", Форма, ОсновнойОбъект);
	Если ОсновнойОбъект <> Неопределено Тогда Возврат ОсновнойОбъект; КонецЕсли;
	Если ТипЗнч(Реквизит(Форма, "Объект")) = Тип("ДанныеФормыСтруктура") Тогда
		ОсновнойОбъект = Форма.Объект;
	КонецЕсли;
	Возврат ОсновнойОбъект;
КонецФункции

// Перемещает все подчиненные элементы на новое место.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - 
//  Родитель			 - ЭлементФормы - 
//  РодительЭлементов	 - ЭлементФормы - 
//  ПередЭлементами		 - ЭлементФормы - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПереместитьПодчиненные(Форма, Знач Родитель, Знач РодительЭлементов = Неопределено, Знач ПередЭлементами = Неопределено) Экспорт
	//Добавляем в массив потому что иначе итератор косячит при перемещении элементов. 
	МассивПеремещаемых = Новый Массив;
	Для Каждого Элемент Из Родитель.ПодчиненныеЭлементы Цикл
		//когда РодительЭлементов подчинен Родителю, РодительЭлементов не должен быть перемещен - иначе будет ошибка.
		Если Элемент.Имя = РодительЭлементов.Имя Тогда Продолжить; КонецЕсли;
		МассивПеремещаемых.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из МассивПеремещаемых Цикл
		Форма.Элементы.Переместить(Элемент, РодительЭлементов, ПередЭлементами);
	КонецЦикла;
КонецФункции

// Возвращает актуальную ссылку, с которой пользователь работает в данный момент.
// Для формы элемента это ключевая ссылка (Форма.Объект.Ссылка), для формы списка - ссылка текущей строки. 
// Предназначена для реализации команд, работающих как в форме списка, так и в форме элемента.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - 
// 
// Возвращаемое значение:
//   - ПроизвольнаяСсылка 
//
Функция ТекущаяСсылка(Форма) Экспорт 
	ОсновнойСписок = ОсновнойСписок(Форма);
	Если ОсновнойСписок <> Неопределено Тогда
		#Если Клиент Тогда
			Если ТипЗнч(ОсновнойСписок.ТекущаяСтрока) <> Тип("Число") Тогда
				Возврат ОсновнойСписок.ТекущаяСтрока;
			ИначеЕсли А1Э_Общее.Свойство(ОсновнойСписок.ТекущиеДанные, "Ссылка") Тогда
				Возврат ОсновнойСписок.ТекущиеДанные.Ссылка;
			Иначе
				А1Э_Служебный.СлужебноеИсключение("Для определения текущей ссылки в динамическом списке без основной таблицы необходимо доступное поле <Ссылка>");
			КонецЕсли;
		#Иначе
			А1Э_Служебный.СлужебноеИсключение("ТекущаяСсылка() для форм списков может быть вызвана только &НаКлиенте!");
		#КонецЕсли
	КонецЕсли;
	ОсновнойОбъект = ОсновнойОбъект(Форма);
	Если ОсновнойОбъект <> Неопределено Тогда
		Возврат ОсновнойОбъект.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает имя формы, как оно задано в конфигураторе, без имен родителей.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - 
// 
// Возвращаемое значение:
//   - Строка
//
Функция Имя(Форма) Экспорт
	Возврат А1Э_Строки.ПослеСКонца(Форма.ИмяФормы, ".");		
КонецФункции

#КонецОбласти

#Область Служебно

Функция ДанныеКолонкиТаблицыФормы(ИсточникДанных) Экспорт
	ДанныеКолонки = Новый Структура("Имя,Тип,Заголовок");
	ДанныеКолонки.Вставить("Параметры", Новый Структура);
	ДанныеКолонки.Вставить("действия", Новый Структура);
	Если А1Э_Структуры.ЯвляетсяСтруктурой(ИсточникДанных) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКолонки, ИсточникДанных);
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
		Разделение = А1Э_Строки.ПередПосле(ИсточникДанных, ":");
		ДанныеКолонки.Имя = Разделение.Перед;
		ДанныеКолонки.Тип = Разделение.После;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("ИсточникДанных", "А1Э_Формы.ДанныеКолонкиТаблицыФормы", ИсточникДанных, "Строка,Структура");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеКолонки.Заголовок) Тогда
		ДанныеКолонки.Заголовок = А1Э_Строки.Наименование(ДанныеКолонки.Имя);
	КонецЕсли;
	
	Возврат ДанныеКолонки;	
КонецФункции 

Функция ДанныеКолонокТаблицыФормы(Знач Колонки) Экспорт 
	Колонки = А1Э_Массивы.Массив(Колонки);
	Результат = Новый Массив;
	Для Каждого Колонка Из Колонки Цикл
		Результат.Добавить(ДанныеКолонкиТаблицыФормы(Колонка));	
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ВыделенаТолькоОднаСтрока(Список) Экспорт
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Сообщить("Необходимо выделить строку в списке!");
		Возврат Ложь;
	ИначеЕсли ВыделенныеСтроки.Количество() > 1 Тогда
		Сообщить("Необходимо выделить только одну строку в списке");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область БуферОбмена
#Если Клиент Тогда
	
	Функция УстановитьТекстВБуферОбмена(Текст, Форма = Неопределено) Экспорт
		#Если ВебКлиент Тогда
			УстановитьТекстВБуферОбменаВВебКлиенте(Текст, Форма);
			Возврат Неопределено;
		#Иначе
			Объект = Новый COMОбъект("htmlfile"); 
			Объект.ParentWindow.ClipboardData.Setdata("Text", Текст);
		#КонецЕсли
	КонецФункции
	
	Функция УстановитьТекстВБуферОбменаВВебКлиенте(Текст, Форма)
		Если ТипЗнч(Форма) <> Тип("УправляемаяФорма") Тогда
			А1Э_Служебный.СлужебноеИсключение("Для работы с буфером обмена в веб-клиенте необходимо передавать форму!");
		КонецЕсли;
		ПолеХТМЛ = Форма.Элементы.Найти("ПолеХТМЛ");
		Если ПолеХТМЛ = Неопределено Или ПолеХТМЛ.Вид <> ВидПоляФормы.ПолеHTMLДокумента Тогда
			А1Э_Служебный.СлужебноеИсключение("Для работы с буфером обмена в веб-клиенте должен быть элемент ПолеХТМЛ вида ПолеHTMLдокумента!");
		КонецЕсли;
		Копир = ПолеХТМЛ.Документ.getElementById("Copier");
		Если Копир = Неопределено Тогда
			А1Э_Служебный.СлужебноеИсключение("Для работы с буфером обмена в веб-клиенте поле HTML должно содержать элемент Копир");
		КонецЕсли;
		Копир.value = Текст;
		Копир.click();
		Копир.value = "";		
	КонецФункции
	
	Функция ПолучитьТекстИзБуфераОбмена(Форма = Неопределено) Экспорт
		#Если ВебКлиент Тогда
			Возврат ПолучитьТекстИзБуфераОбменаВВебКлиенте(Форма)
		#Иначе
			Объект = Новый COMОбъект("htmlfile"); 
			Текст = Объект.ParentWindow.ClipboardData.Getdata("Text");
			Возврат Текст;
		#КонецЕсли
	КонецФункции
	
	Функция ПолучитьТекстИзБуфераОбменаВВебКлиенте(Форма)
		А1Э_Служебный.СлужебноеИсключение("В данные момент получение текста из буфера обмена не поддерживается в веб-клиенте");	
	КонецФункции 
	
#КонецЕсли
#КонецОбласти

#Область ПоказФормыВыбора
#Если Клиент Тогда
	
	// Открывает форму выбора. Если указано ИмяОбъекта - открывает соответствующею форму выбора, в противном случае открывает универсальную.
	//
	// Параметры:
	//  Форма							 - ФормаКлиентскогоПриложения -  
	//  ИмяОбъекта						 - Строка - полное имя объекта метаданных, выбор которого осуществляется. 
	//  ИмяПроцедурыДальнейшихДействий	 - Строка - имя процедуры, в которую будет передано выполнение кода после выбора. 
	//  ПараметрыОткрытия				 - Структура,Неопределено - параметры открытия формы 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ПоказатьВыбор(Форма, ИмяОбъекта = Неопределено, ИмяПроцедурыДальнейшихДействий, ПараметрыОткрытия = Неопределено, Контекст = Неопределено) Экспорт
		ВнешнееОповещение = А1Э_СтандартныеТипы.ОписаниеОповещенияПолучить(ИмяПроцедурыДальнейшихДействий, Форма, Контекст);
		ВнутреннееОповещение = Новый ОписаниеОповещения("ЗавершитьПоказВыбора", ЭтотОбъект, Новый Структура("ВнешнееОповещение", ВнешнееОповещение));
		Если ИмяОбъекта <> Неопределено Тогда
			ОткрытьФорму(ИмяОбъекта + ".ФормаВыбора", ПараметрыОткрытия, Форма, , , , ВнутреннееОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОткрытьУниверсальнуюФормуВыбора(Форма, ИмяОбъекта, ВнешнееОповещение, ПараметрыОткрытия)
		КонецЕсли;
		
	КонецФункции
	
	Процедура ЗавершитьПоказВыбора(Результат, ДополнительныеПараметры) Экспорт
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ВозвращаемоеЗначение = Неопределено;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВнешнееОповещение, Результат);	
	КонецПроцедуры 
	
	Процедура ОткрытьУниверсальнуюФормуВыбора(Форма, ИмяОбъекта = Неопределено, ОповещениеОВыборе, ПараметрыОткрытия)
		А1Э_УниверсальнаяФорма.Открыть(А1Э_Структуры.ЗначениеСвойства(ПараметрыОткрытия, "Заголовок", "Выберите объект"), "А1Э_Формы.ПоказФормыВыбораЧерезУниверсальнуюФорму_ПриСозданииНаСервере",
		А1Э_Структуры.Создать(
		"ИмяОбъекта", ИмяОбъекта,
		"ПараметрыОткрытия", ПараметрыОткрытия,
		), Форма, , , , ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецПроцедуры
	
	Функция ПоказФормыВыбораЧерезУниверсальнуюФорму_Выбрать(Форма, Команда) Экспорт 
		Если Форма.Элементы.Список.ТекущиеДанные = Неопределено Тогда
			Результат = Неопределено;
		ИначеЕсли Форма.Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
			Результат = Новый Массив;
			Для Каждого Элемент Из Форма.Элементы.Список.ВыделенныеСтроки Цикл
				Результат.Добавить(Форма.Элементы.Список.ДанныеСтроки(Элемент).Ссылка);
			КонецЦикла;
		Иначе
			Результат = Форма.Элементы.Список.ТекущиеДанные.Ссылка;
		КонецЕсли;
		Форма.Закрыть(Результат);
	КонецФункции 
	
	Функция ПоказФормыВыбораЧерезУниверсальнуюФорму_Выбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
		ПоказФормыВыбораЧерезУниверсальнуюФорму_Выбрать(Форма, Неопределено);
	КонецФункции 
#КонецЕсли

#Если НЕ Клиент Тогда
	
	Функция ПоказФормыВыбораЧерезУниверсальнуюФорму_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		СоздатьРеквизит(Форма, "Список", "ДинамическийСписок");
		
		Если Форма.Параметры.ПараметрыОткрытия.Свойство("ТекстЗапроса") = Истина Тогда
			ТекстЗапроса = Форма.Параметры.ПараметрыОткрытия.ТекстЗапроса;
		ИначеЕсли Форма.Параметры.Свойство("ИмяОбъекта") = Истина Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Таблица.Ссылка
			|ИЗ &ИмяОбъекта КАК Таблица";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяОбъекта", Форма.Параметры.ИмяОбъекта);
		КонецЕсли;
		Форма.Список.ТекстЗапроса = ТекстЗапроса;
		
		Если Форма.Параметры.ПараметрыОткрытия.Свойство("ПараметрыЗапроса") = Истина Тогда
			Для Каждого Пара Из Форма.Параметры.ПараметрыОткрытия.ПараметрыЗапроса Цикл
				Форма.Список.Параметры.УстановитьЗначениеПараметра(Пара.Ключ, Пара.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыСписка = Новый Структура;
		ПараметрыСписка.Вставить("Тип", Тип("ТаблицаФормы"));
		Если Форма.Параметры.ПараметрыОткрытия.Свойство("ПараметрыСписка") = Истина Тогда
			А1Э_Структуры.СкопироватьСвойства(ПараметрыСписка, Форма.Параметры.ПараметрыОткрытия.ПараметрыСписка);
		КонецЕсли;
		
		МассивОписаний = Новый Массив;
		А1Э_Формы.ДобавитьОписаниеЭлемента(МассивОписаний, "Список", , , , , ПараметрыСписка, 
		А1Э_Структуры.Создать(
		"Выбор", "А1Э_Формы.ПоказФормыВыбораЧерезУниверсальнуюФорму_Выбор",
		));
		А1Э_Формы.ДобавитьОписаниеЭлемента(МассивОписаний, "Ссылка", "Список",,"Список");
		А1Э_Формы.ДобавитьОписаниеКомандыИКнопки(МассивОписаний, "Выбрать", "А1Э_Формы.ПоказФормыВыбораЧерезУниверсальнуюФорму_Выбрать", , , "Список",,,Новый Структура("КнопкаПоУмолчанию", Истина));
		А1Э_УниверсальнаяФорма.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний);
	КонецФункции 
	
#КонецЕсли 
#КонецОбласти

#Область ЗаписьФормыСПредупреждением
#Если Клиент Тогда
	
	Функция ЗаписатьСПредупреждениемПриНеобходимости(Форма, ИдентификаторДальнейшихДействий, Знач Контекст = Неопределено) Экспорт
		Модуль = А1Э_Структуры.ЗначениеСвойства(Контекст, "Модуль", Форма);
		ВнешнееОповещение = А1Э_СтандартныеТипы.ОписаниеОповещенияПолучить(ИдентификаторДальнейшихДействий, Модуль, Контекст);		
		Если НеобходимостьЗаписи(Форма, Контекст) = Ложь Тогда
			ВыполнитьОбработкуОповещения(ВнешнееОповещение, КодВозвратаДиалога.Да);
			Возврат Неопределено;
		КонецЕсли;
		ВнутреннееОповещение = Новый ОписаниеОповещения("ЗавершитьЗаписьСПредупреждением", ЭтотОбъект, 
		А1Э_Структуры.Создать("Форма", Форма,
		"ВнешнееОповещение", ВнешнееОповещение,
		"Контекст", Контекст));
		ПоказатьВопрос(ВнутреннееОповещение, "Для выполнения операции данные текущей формы будут " + ?(А1Э_Общее.Свойство(Контекст, "Проведение") = Истина, "проведены", "записаны") + ". Продолжить?", 
		РежимДиалогаВопрос.ДаНет, , , "Предупреждение"); 	
	КонецФункции
	
	Функция НеобходимостьЗаписи(Форма, Контекст)
		Если А1Э_Общее.ЗначениеСвойства(Контекст, "Проведение") = Истина И НЕ Форма.Объект.Проведен Тогда
			Возврат Истина;
		КонецЕсли;
		ВариантПроверки = А1Э_Структуры.ЗначениеСвойства(Контекст, "ВариантПроверки", "Полный");
		Если ВариантПроверки = "Полный" Тогда
			Возврат НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) ИЛИ Форма.Модифицированность;
		ИначеЕсли ВариантПроверки = "Новый" Тогда
			Возврат НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка)
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Вариант проверки " + ВариантПроверки + " не поддерживается!");
		КонецЕсли;
	КонецФункции
	
	Процедура ЗавершитьЗаписьСПредупреждением(Результат, Контекст) Экспорт
		Если Результат = КодВозвратаДиалога.Да Тогда
			Если А1Э_Общее.Свойство(Контекст, "Проведение") = Истина Тогда
				Контекст.Форма.Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Контекст.Форма.Записать();
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(Контекст.ВнешнееОповещение, Результат);
		КонецЕсли;
	КонецПроцедуры
	
#КонецЕсли 
#КонецОбласти

#Область ОчисткаТЧСПредупреждением
#Если Клиент Тогда
	
	Функция ОчиститьТЧСПредупреждениемПриНеобходимости(Форма, Знач ИменаТЧ, ИмяПроцедурыДальнейшихДействий, Знач ДополнительныеПараметры = Неопределено) Экспорт
		ИменаТЧ = А1Э_Массивы.Массив(ИменаТЧ);
		ВнешнееОповещение = Новый ОписаниеОповещения(ИмяПроцедурыДальнейшихДействий, Форма, ДополнительныеПараметры);
		НепустыеТЧ = Новый Массив;
		СинонимыНепустыхТЧ = Новый Массив;
		Для Каждого ИмяТЧ Из ИменаТЧ Цикл
			ПозицияТочки = СтрНайти(ИмяТЧ, ".");
			Если ПозицияТочки = 0 Тогда
				ИстиннаяТЧ = "Объект." + ИмяТЧ;
				СинонимТЧ = ИмяТЧ;
			Иначе
				ИстиннаяТЧ = ИмяТЧ;
				СинонимТЧ = Сред(ИмяТЧ, ПозицияТочки + 1);
			КонецЕсли;
			Если Реквизит(Форма, ИстиннаяТЧ).Количество() <> 0 Тогда
				НепустыеТЧ.Добавить(ИстиннаяТЧ);
				СинонимыНепустыхТЧ.Добавить(СинонимТЧ);
			КонецЕсли;
		КонецЦикла;
		Если НепустыеТЧ.Количество() = 0 Тогда
			ВыполнитьОбработкуОповещения(ВнешнееОповещение, КодВозвратаДиалога.Да);
			Возврат Неопределено;
		КонецЕсли;
		ВнутреннееОповещение = Новый ОписаниеОповещения("ЗавершитьОчисткуТЧСПредупреждением", ЭтотОбъект, Новый Структура("Форма,НепустыеТЧ,ВнешнееОповещение,ДополнительныеПараметры", Форма, НепустыеТЧ, ВнешнееОповещение, ДополнительныеПараметры));
		Если А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "СинонимТЧ") = Неопределено Тогда
			СинонимТЧ = СтрСоединить(СинонимыНепустыхТЧ, ", ");
		Иначе
			СинонимТЧ = ДополнительныеПараметры.СинонимТЧ;
		КонецЕсли;
		Если А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "ШаблонТекста") = Неопределено Тогда
			ШаблонТекста = "Для выполнения операции табличные части ""[СинонимТЧ]"" будет очищена. Продолжить?";
		Иначе
			ШаблонТекста = ДополнительныеПараметры.ШаблонТекста;
		КонецЕсли;
		ПоказатьВопрос(ВнутреннееОповещение, 
		А1Э_Строки.ПоШаблону(ШаблонТекста, Новый Структура("СинонимТЧ", СинонимТЧ)),
		РежимДиалогаВопрос.ДаНет, , , "Предупреждение"); 
	КонецФункции
	
	Процедура ЗавершитьОчисткуТЧСПредупреждением(Результат, ДополнительныеПараметры) Экспорт
		Если Результат = КодВозвратаДиалога.Да Тогда
			Если А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры.ДополнительныеПараметры, "НеВыполнятьОчистку") <> Истина Тогда
				Для Каждого НепустаяТЧ Из ДополнительныеПараметры.НепустыеТЧ Цикл
					Реквизит(ДополнительныеПараметры.Форма, НепустаяТЧ).Очистить();
				КонецЦикла;
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВнешнееОповещение, Результат);
		КонецЕсли;
	КонецПроцедуры
	
#КонецЕсли 
#КонецОбласти 

#Область Устарело
#Если НЕ Клиент Тогда
	
	Функция ДобавитьОписаниеКомандыИКнопки(МассивОписаний, Имя, Действие = Неопределено, ЭтоГиперссылка = Ложь, Заголовок = "", РодительЭлемента = Неопределено, ПередЭлементом = Неопределено, Подсказка = "", Параметры = Неопределено, Действия = Неопределено) Экспорт 
		Описание = НовыйОписаниеКомандыКнопки();
		Описание.Имя = Имя;
		Если Действие = Неопределено Тогда
			Описание.Действие = Имя;
		Иначе
			Описание.Действие = Действие;
		КонецЕсли;
		Описание.ИмяКоманды = Имя;
		Описание.ЭтоГиперссылка = ЭтоГиперссылка;
		Описание.РодительЭлемента = РодительЭлемента;
		Описание.ПередЭлементом = ПередЭлементом;
		Описание.Подсказка = Подсказка;
		Описание.Заголовок = Заголовок;
		А1Э_Структуры.СкопироватьСвойства(Описание.Параметры, Параметры, Истина);
		А1Э_Структуры.СкопироватьСвойства(Описание.Действия, Действия, Истина);
		
		ОбработатьСочетаниеКлавиш(Описание.Параметры);
		
		МассивОписаний.Добавить(Описание);
	КонецФункции
	
#КонецЕсли
#КонецОбласти

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_Формы";	
КонецФункции